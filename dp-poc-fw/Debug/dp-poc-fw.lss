
dp-poc-fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001176  0000120a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800124  00800124  0000122e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018b6  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001037  00000000  00000000  00002d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010cd  00000000  00000000  00003dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00004e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000764  00000000  00000000  00005254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cef  00000000  00000000  000059b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000066a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e7       	ldi	r30, 0x76	; 118
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 32       	cpi	r26, 0x24	; 36
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e2       	ldi	r26, 0x24	; 36
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 36       	cpi	r26, 0x6C	; 108
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ab 03 	call	0x756	; 0x756 <main>
      9e:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <current_sensor_init>:
uint16_t max_raw_curr_val = 100;
uint16_t min_raw_curr_val = 1023;

void current_sensor_init()
{
	GPIO_SET_PIN(CURRENT_SENSOR_IN_Pin, CURRENT_SENSOR_IN_Port, INPUT);
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	62 e0       	ldi	r22, 0x02	; 2
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	0e 94 3b 02 	call	0x476	; 0x476 <GPIO_SET_PIN>
      b0:	08 95       	ret

000000b2 <get_current_pp>:
}

uint16_t get_current_pp()
{
      b2:	cf 93       	push	r28
	static uint16_t raw_current_val = 0;
	max_raw_curr_val = 0;
      b4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <max_raw_curr_val+0x1>
      b8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <max_raw_curr_val>
	min_raw_curr_val = 1023;
      bc:	8f ef       	ldi	r24, 0xFF	; 255
      be:	93 e0       	ldi	r25, 0x03	; 3
      c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
      c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
      c8:	c8 ec       	ldi	r28, 0xC8	; 200
	
	for(uint8_t i=0; i<NUM_OF_SAMPLES; i++)
	{
		raw_current_val = ADC_READ(CURRENT_SENSOR_IN_Channel);
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	0e 94 25 02 	call	0x44a	; 0x44a <ADC_READ>
		if(raw_current_val >= max_raw_curr_val)
      d0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <max_raw_curr_val>
      d4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <max_raw_curr_val+0x1>
      d8:	82 17       	cp	r24, r18
      da:	93 07       	cpc	r25, r19
      dc:	20 f0       	brcs	.+8      	; 0xe6 <get_current_pp+0x34>
		{
			max_raw_curr_val = raw_current_val;
      de:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <max_raw_curr_val+0x1>
      e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <max_raw_curr_val>
		}
		
		if(raw_current_val <= min_raw_curr_val)
      e6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
      ea:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
      ee:	28 17       	cp	r18, r24
      f0:	39 07       	cpc	r19, r25
      f2:	20 f0       	brcs	.+8      	; 0xfc <get_current_pp+0x4a>
		{
			min_raw_curr_val = raw_current_val;
      f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
      f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	45 e3       	ldi	r20, 0x35	; 53
      fe:	4a 95       	dec	r20
     100:	f1 f7       	brne	.-4      	; 0xfe <get_current_pp+0x4c>
     102:	00 00       	nop
     104:	c1 50       	subi	r28, 0x01	; 1
{
	static uint16_t raw_current_val = 0;
	max_raw_curr_val = 0;
	min_raw_curr_val = 1023;
	
	for(uint8_t i=0; i<NUM_OF_SAMPLES; i++)
     106:	09 f7       	brne	.-62     	; 0xca <get_current_pp+0x18>
		}
		
		_delay_us(10);
	}
	
	sprintf(BUFFER, " %d , %d \n\r", max_raw_curr_val , min_raw_curr_val) ;
     108:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     10c:	8f 93       	push	r24
     10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     112:	8f 93       	push	r24
     114:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <max_raw_curr_val+0x1>
     118:	8f 93       	push	r24
     11a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <max_raw_curr_val>
     11e:	8f 93       	push	r24
     120:	86 e0       	ldi	r24, 0x06	; 6
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	9f 93       	push	r25
     126:	8f 93       	push	r24
     128:	8a e3       	ldi	r24, 0x3A	; 58
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	9f 93       	push	r25
     12e:	8f 93       	push	r24
     130:	0e 94 0b 06 	call	0xc16	; 0xc16 <sprintf>
	print(BUFFER);
     134:	8a e3       	ldi	r24, 0x3A	; 58
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 03 01 	call	0x206	; 0x206 <print>
	//debug_print_float(max_raw_curr_val - min_raw_curr_val);
	return (max_raw_curr_val - min_raw_curr_val);
     13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <max_raw_curr_val>
     140:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <max_raw_curr_val+0x1>
     144:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     148:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     14c:	4d b7       	in	r20, 0x3d	; 61
     14e:	5e b7       	in	r21, 0x3e	; 62
     150:	48 5f       	subi	r20, 0xF8	; 248
     152:	5f 4f       	sbci	r21, 0xFF	; 255
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	f8 94       	cli
     158:	5e bf       	out	0x3e, r21	; 62
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	4d bf       	out	0x3d, r20	; 61
}
     15e:	82 1b       	sub	r24, r18
     160:	93 0b       	sbc	r25, r19
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <get_current_rms>:
double actual_currrent_pp_ = 0;
double actual_currrent_pp = 0;
double get_current_rms()
{
     166:	cf 93       	push	r28
     168:	ca e0       	ldi	r28, 0x0A	; 10
	for(uint8_t i = 0; i < 10; i++)
	{
		actual_currrent_pp += ((double)get_current_pp() * 5000.0)/1023.0;
     16a:	0e 94 59 00 	call	0xb2	; 0xb2 <get_current_pp>
     16e:	bc 01       	movw	r22, r24
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 10 05 	call	0xa20	; 0xa20 <__floatunsisf>
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e4       	ldi	r19, 0x40	; 64
     17c:	4c e9       	ldi	r20, 0x9C	; 156
     17e:	55 e4       	ldi	r21, 0x45	; 69
     180:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3>
     184:	20 e0       	ldi	r18, 0x00	; 0
     186:	30 ec       	ldi	r19, 0xC0	; 192
     188:	4f e7       	ldi	r20, 0x7F	; 127
     18a:	54 e4       	ldi	r21, 0x44	; 68
     18c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divsf3>
     190:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__data_end>
     194:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__data_end+0x1>
     198:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <__data_end+0x2>
     19c:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <__data_end+0x3>
     1a0:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__addsf3>
     1a4:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <__data_end>
     1a8:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <__data_end+0x1>
     1ac:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end+0x2>
     1b0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x3>
     1b4:	c1 50       	subi	r28, 0x01	; 1
}
double actual_currrent_pp_ = 0;
double actual_currrent_pp = 0;
double get_current_rms()
{
	for(uint8_t i = 0; i < 10; i++)
     1b6:	c9 f6       	brne	.-78     	; 0x16a <get_current_rms+0x4>
	{
		actual_currrent_pp += ((double)get_current_pp() * 5000.0)/1023.0;
	}
	actual_currrent_pp /= 10.0;
     1b8:	20 e0       	ldi	r18, 0x00	; 0
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	40 e2       	ldi	r20, 0x20	; 32
     1be:	51 e4       	ldi	r21, 0x41	; 65
     1c0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divsf3>
     1c4:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <__data_end>
     1c8:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <__data_end+0x1>
     1cc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end+0x2>
     1d0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x3>
	return (actual_currrent_pp * 353.553)/215.0 ;
     1d4:	29 ec       	ldi	r18, 0xC9	; 201
     1d6:	36 ec       	ldi	r19, 0xC6	; 198
     1d8:	40 eb       	ldi	r20, 0xB0	; 176
     1da:	53 e4       	ldi	r21, 0x43	; 67
     1dc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3>
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	47 e5       	ldi	r20, 0x57	; 87
     1e6:	53 e4       	ldi	r21, 0x43	; 67
     1e8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divsf3>
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <fputc>:
	sprintf(BUFFER, "%d.%d", integer_part, decimal_part);
	print(BUFFER);
}

PUTCHAR_PROTOTYPE
{
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	c8 2f       	mov	r28, r24
     1f6:	d9 2f       	mov	r29, r25
	UART_TRANSMIT((uint8_t)ch);
     1f8:	0e 94 91 03 	call	0x722	; 0x722 <UART_TRANSMIT>
	return ch;
}
     1fc:	8c 2f       	mov	r24, r28
     1fe:	9d 2f       	mov	r25, r29
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <print>:

void print( const char *message)
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	ec 01       	movw	r28, r24
	for (int i = 0; message[i] != '\0'; i++) {
     20c:	88 81       	ld	r24, Y
     20e:	88 23       	and	r24, r24
     210:	61 f0       	breq	.+24     	; 0x22a <print+0x24>
     212:	21 96       	adiw	r28, 0x01	; 1
		UART_TRANSMIT(message[i]);
     214:	0e 94 91 03 	call	0x722	; 0x722 <UART_TRANSMIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     218:	8f e3       	ldi	r24, 0x3F	; 63
     21a:	9c e9       	ldi	r25, 0x9C	; 156
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <print+0x16>
     220:	00 c0       	rjmp	.+0      	; 0x222 <print+0x1c>
     222:	00 00       	nop
	return ch;
}

void print( const char *message)
{
	for (int i = 0; message[i] != '\0'; i++) {
     224:	89 91       	ld	r24, Y+
     226:	81 11       	cpse	r24, r1
     228:	f5 cf       	rjmp	.-22     	; 0x214 <print+0xe>
		UART_TRANSMIT(message[i]);
		_delay_ms(10); // Add a delay between characters (optional)
	}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <print_float>:
/**
 * @brief 
 *
 */
void print_float(float value)
{
     230:	8f 92       	push	r8
     232:	9f 92       	push	r9
     234:	af 92       	push	r10
     236:	bf 92       	push	r11
     238:	cf 92       	push	r12
     23a:	df 92       	push	r13
     23c:	ef 92       	push	r14
     23e:	ff 92       	push	r15
     240:	4b 01       	movw	r8, r22
     242:	5c 01       	movw	r10, r24
	int integer_part = (int)value;
     244:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__fixsfsi>
     248:	6b 01       	movw	r12, r22
     24a:	7c 01       	movw	r14, r24
	int decimal_part = (int)((value - integer_part) * 1000); // Extract 3 decimal places	
	sprintf(BUFFER, "%d.%d", integer_part, decimal_part);
     24c:	07 2e       	mov	r0, r23
     24e:	00 0c       	add	r0, r0
     250:	88 0b       	sbc	r24, r24
     252:	99 0b       	sbc	r25, r25
     254:	0e 94 12 05 	call	0xa24	; 0xa24 <__floatsisf>
     258:	9b 01       	movw	r18, r22
     25a:	ac 01       	movw	r20, r24
     25c:	c5 01       	movw	r24, r10
     25e:	b4 01       	movw	r22, r8
     260:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__subsf3>
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	4a e7       	ldi	r20, 0x7A	; 122
     26a:	54 e4       	ldi	r21, 0x44	; 68
     26c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3>
     270:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__fixsfsi>
     274:	7f 93       	push	r23
     276:	6f 93       	push	r22
     278:	df 92       	push	r13
     27a:	cf 92       	push	r12
     27c:	82 e1       	ldi	r24, 0x12	; 18
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	9f 93       	push	r25
     282:	8f 93       	push	r24
     284:	8a e3       	ldi	r24, 0x3A	; 58
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	9f 93       	push	r25
     28a:	8f 93       	push	r24
     28c:	0e 94 0b 06 	call	0xc16	; 0xc16 <sprintf>
	print(BUFFER);
     290:	8a e3       	ldi	r24, 0x3A	; 58
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	0e 94 03 01 	call	0x206	; 0x206 <print>
}
     298:	8d b7       	in	r24, 0x3d	; 61
     29a:	9e b7       	in	r25, 0x3e	; 62
     29c:	08 96       	adiw	r24, 0x08	; 8
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	9e bf       	out	0x3e, r25	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	8d bf       	out	0x3d, r24	; 61
     2a8:	ff 90       	pop	r15
     2aa:	ef 90       	pop	r14
     2ac:	df 90       	pop	r13
     2ae:	cf 90       	pop	r12
     2b0:	bf 90       	pop	r11
     2b2:	af 90       	pop	r10
     2b4:	9f 90       	pop	r9
     2b6:	8f 90       	pop	r8
     2b8:	08 95       	ret

000002ba <relay_init>:
#include "relay_control.h"


void relay_init()
{
	GPIO_SET_PIN(RELAY_DRIVER_OUT_Pin , RELAY_DRIVER_OUT_Port , OUTPUT);
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	63 e0       	ldi	r22, 0x03	; 3
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	0e 94 3b 02 	call	0x476	; 0x476 <GPIO_SET_PIN>
     2c4:	08 95       	ret

000002c6 <enable_relay>:
}


void enable_relay()
{
	GPIO_WRITE_PIN(RELAY_DRIVER_OUT_Pin , RELAY_DRIVER_OUT_Port , SET);
     2c6:	41 e0       	ldi	r20, 0x01	; 1
     2c8:	63 e0       	ldi	r22, 0x03	; 3
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	0e 94 de 02 	call	0x5bc	; 0x5bc <GPIO_WRITE_PIN>
     2d0:	08 95       	ret

000002d2 <disable_relay>:



void disable_relay()
{
	GPIO_WRITE_PIN(RELAY_DRIVER_OUT_Pin , RELAY_DRIVER_OUT_Port , RESET);	
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	63 e0       	ldi	r22, 0x03	; 3
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	0e 94 de 02 	call	0x5bc	; 0x5bc <GPIO_WRITE_PIN>
     2dc:	08 95       	ret

000002de <voltage_sensor_init>:
uint16_t max_raw_val = 0;
uint16_t min_raw_val = 1023;
	
void voltage_sensor_init()
{
	GPIO_SET_PIN(VOLTAGE_SENSOR_IN_Pin, VOLTAGE_SENSOR_IN_Port, INPUT);
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	62 e0       	ldi	r22, 0x02	; 2
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 3b 02 	call	0x476	; 0x476 <GPIO_SET_PIN>
     2e8:	08 95       	ret

000002ea <get_voltage_pp>:
}

uint16_t get_voltage_pp()
{
     2ea:	cf 93       	push	r28
	static uint16_t raw_voltage_val = 0;
	max_raw_val = 0;
     2ec:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <max_raw_val+0x1>
     2f0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <max_raw_val>
	min_raw_val = 1023;
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	93 e0       	ldi	r25, 0x03	; 3
     2f8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <min_raw_val+0x1>
     2fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <min_raw_val>
     300:	c8 ec       	ldi	r28, 0xC8	; 200
	
	for(uint8_t i=0; i<NUM_OF_SAMPLES; i++)
	{		
		raw_voltage_val = ADC_READ(VOLTAGE_SENSOR_IN_Channel);
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 25 02 	call	0x44a	; 0x44a <ADC_READ>
		//sprintf(BUFFER, "raw voltage -  %d\n\r", raw_voltage_val) ;
		//print(BUFFER);
		if(raw_voltage_val >= max_raw_val)
     308:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <max_raw_val>
     30c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <max_raw_val+0x1>
     310:	82 17       	cp	r24, r18
     312:	93 07       	cpc	r25, r19
     314:	20 f0       	brcs	.+8      	; 0x31e <get_voltage_pp+0x34>
		{
			max_raw_val = raw_voltage_val;			
     316:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <max_raw_val+0x1>
     31a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <max_raw_val>
		}
		
		if(raw_voltage_val <= min_raw_val)
     31e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <min_raw_val>
     322:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <min_raw_val+0x1>
     326:	28 17       	cp	r18, r24
     328:	39 07       	cpc	r19, r25
     32a:	20 f0       	brcs	.+8      	; 0x334 <get_voltage_pp+0x4a>
		{
			min_raw_val = raw_voltage_val;
     32c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <min_raw_val+0x1>
     330:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <min_raw_val>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     334:	45 e3       	ldi	r20, 0x35	; 53
     336:	4a 95       	dec	r20
     338:	f1 f7       	brne	.-4      	; 0x336 <get_voltage_pp+0x4c>
     33a:	00 00       	nop
     33c:	c1 50       	subi	r28, 0x01	; 1
{
	static uint16_t raw_voltage_val = 0;
	max_raw_val = 0;
	min_raw_val = 1023;
	
	for(uint8_t i=0; i<NUM_OF_SAMPLES; i++)
     33e:	09 f7       	brne	.-62     	; 0x302 <get_voltage_pp+0x18>
		}
		
		_delay_us(10);		
	}
	
	sprintf(BUFFER, " %d , %d \n\r", max_raw_val , min_raw_val) ;
     340:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <min_raw_val+0x1>
     344:	8f 93       	push	r24
     346:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <min_raw_val>
     34a:	8f 93       	push	r24
     34c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <max_raw_val+0x1>
     350:	8f 93       	push	r24
     352:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <max_raw_val>
     356:	8f 93       	push	r24
     358:	86 e0       	ldi	r24, 0x06	; 6
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	9f 93       	push	r25
     35e:	8f 93       	push	r24
     360:	8a e3       	ldi	r24, 0x3A	; 58
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	0e 94 0b 06 	call	0xc16	; 0xc16 <sprintf>
	print(BUFFER);
     36c:	8a e3       	ldi	r24, 0x3A	; 58
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 03 01 	call	0x206	; 0x206 <print>
    //debug_print_float(max_raw_val - min_raw_val);
	return (max_raw_val - min_raw_val);
     374:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <max_raw_val>
     378:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <max_raw_val+0x1>
     37c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <min_raw_val>
     380:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <min_raw_val+0x1>
     384:	4d b7       	in	r20, 0x3d	; 61
     386:	5e b7       	in	r21, 0x3e	; 62
     388:	48 5f       	subi	r20, 0xF8	; 248
     38a:	5f 4f       	sbci	r21, 0xFF	; 255
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	5e bf       	out	0x3e, r21	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	4d bf       	out	0x3d, r20	; 61
}
     396:	82 1b       	sub	r24, r18
     398:	93 0b       	sbc	r25, r19
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <get_voltage_rms>:
double actual_voltage_pp_ = 0;
double actual_voltage_pp = 0;
double get_voltage_rms()
{    
     39e:	cf 93       	push	r28
     3a0:	ca e0       	ldi	r28, 0x0A	; 10
	 for(uint8_t i = 0; i < 10; i++)
	 {
		 actual_voltage_pp += ((double)get_voltage_pp() * 5000.0)/1023.0;
     3a2:	0e 94 75 01 	call	0x2ea	; 0x2ea <get_voltage_pp>
     3a6:	bc 01       	movw	r22, r24
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 10 05 	call	0xa20	; 0xa20 <__floatunsisf>
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e4       	ldi	r19, 0x40	; 64
     3b4:	4c e9       	ldi	r20, 0x9C	; 156
     3b6:	55 e4       	ldi	r21, 0x45	; 69
     3b8:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3>
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 ec       	ldi	r19, 0xC0	; 192
     3c0:	4f e7       	ldi	r20, 0x7F	; 127
     3c2:	54 e4       	ldi	r21, 0x44	; 68
     3c4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divsf3>
     3c8:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <actual_voltage_pp>
     3cc:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <actual_voltage_pp+0x1>
     3d0:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <actual_voltage_pp+0x2>
     3d4:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <actual_voltage_pp+0x3>
     3d8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__addsf3>
     3dc:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <actual_voltage_pp>
     3e0:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <actual_voltage_pp+0x1>
     3e4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <actual_voltage_pp+0x2>
     3e8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <actual_voltage_pp+0x3>
     3ec:	c1 50       	subi	r28, 0x01	; 1
}
double actual_voltage_pp_ = 0;
double actual_voltage_pp = 0;
double get_voltage_rms()
{    
	 for(uint8_t i = 0; i < 10; i++)
     3ee:	c9 f6       	brne	.-78     	; 0x3a2 <get_voltage_rms+0x4>
	 {
		 actual_voltage_pp += ((double)get_voltage_pp() * 5000.0)/1023.0;
	 }	 
	 actual_voltage_pp /= 10000.0;
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e4       	ldi	r19, 0x40	; 64
     3f4:	4c e1       	ldi	r20, 0x1C	; 28
     3f6:	56 e4       	ldi	r21, 0x46	; 70
     3f8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divsf3>
     3fc:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <actual_voltage_pp>
     400:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <actual_voltage_pp+0x1>
     404:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <actual_voltage_pp+0x2>
     408:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <actual_voltage_pp+0x3>
	return actual_voltage_pp * 0.35355 * 0.8986 * 230;
     40c:	21 e8       	ldi	r18, 0x81	; 129
     40e:	34 e0       	ldi	r19, 0x04	; 4
     410:	45 eb       	ldi	r20, 0xB5	; 181
     412:	5e e3       	ldi	r21, 0x3E	; 62
     414:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3>
     418:	26 ea       	ldi	r18, 0xA6	; 166
     41a:	3a e0       	ldi	r19, 0x0A	; 10
     41c:	46 e6       	ldi	r20, 0x66	; 102
     41e:	5f e3       	ldi	r21, 0x3F	; 63
     420:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3>
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	46 e6       	ldi	r20, 0x66	; 102
     42a:	53 e4       	ldi	r21, 0x43	; 67
     42c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3>
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <ADC_INIT>:
 * @brief            
 *
 */
void ADC_INIT() {

    ADMUX |= (1 << REFS0);
     434:	ec e7       	ldi	r30, 0x7C	; 124
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	80 64       	ori	r24, 0x40	; 64
     43c:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     43e:	ea e7       	ldi	r30, 0x7A	; 122
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	87 68       	ori	r24, 0x87	; 135
     446:	80 83       	st	Z, r24
     448:	08 95       	ret

0000044a <ADC_READ>:
 */
uint16_t ADC_READ(uint8_t channel) {

    static uint16_t adc_value = 0;
    
    ADMUX = (ADMUX & 0xF8) | (channel & 0x07);   
     44a:	ec e7       	ldi	r30, 0x7C	; 124
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	90 81       	ld	r25, Z
     450:	98 7f       	andi	r25, 0xF8	; 248
     452:	87 70       	andi	r24, 0x07	; 7
     454:	89 2b       	or	r24, r25
     456:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC);    
     458:	ea e7       	ldi	r30, 0x7A	; 122
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	80 64       	ori	r24, 0x40	; 64
     460:	80 83       	st	Z, r24
    while (ADCSRA & (1 << ADSC));
     462:	80 81       	ld	r24, Z
     464:	86 fd       	sbrc	r24, 6
     466:	fd cf       	rjmp	.-6      	; 0x462 <ADC_READ+0x18>
    adc_value = ADCL | (ADCH << 8);
     468:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     46c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
    return adc_value;
     470:	90 e0       	ldi	r25, 0x00	; 0
}
     472:	92 2b       	or	r25, r18
     474:	08 95       	ret

00000476 <GPIO_SET_PIN>:
#include "debug_utilis.h"


void GPIO_SET_PIN(uint8_t pin, uint8_t port, uint8_t status)
{
	switch(port)
     476:	62 30       	cpi	r22, 0x02	; 2
     478:	d1 f1       	breq	.+116    	; 0x4ee <GPIO_SET_PIN+0x78>
     47a:	63 30       	cpi	r22, 0x03	; 3
     47c:	09 f4       	brne	.+2      	; 0x480 <GPIO_SET_PIN+0xa>
     47e:	6b c0       	rjmp	.+214    	; 0x556 <GPIO_SET_PIN+0xe0>
     480:	61 30       	cpi	r22, 0x01	; 1
     482:	09 f0       	breq	.+2      	; 0x486 <GPIO_SET_PIN+0x10>
     484:	9a c0       	rjmp	.+308    	; 0x5ba <GPIO_SET_PIN+0x144>
	{
		case _PORTB:
			if(INPUT == status)
     486:	41 11       	cpse	r20, r1
     488:	0e c0       	rjmp	.+28     	; 0x4a6 <GPIO_SET_PIN+0x30>
			{
				DDRB &= ~(1 << pin); 
     48a:	44 b1       	in	r20, 0x04	; 4
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	b9 01       	movw	r22, r18
     492:	02 c0       	rjmp	.+4      	; 0x498 <GPIO_SET_PIN+0x22>
     494:	66 0f       	add	r22, r22
     496:	77 1f       	adc	r23, r23
     498:	8a 95       	dec	r24
     49a:	e2 f7       	brpl	.-8      	; 0x494 <GPIO_SET_PIN+0x1e>
     49c:	cb 01       	movw	r24, r22
     49e:	80 95       	com	r24
     4a0:	84 23       	and	r24, r20
     4a2:	84 b9       	out	0x04, r24	; 4
     4a4:	08 95       	ret
			}
			else if(OUTPUT == status)
     4a6:	41 30       	cpi	r20, 0x01	; 1
     4a8:	69 f4       	brne	.+26     	; 0x4c4 <GPIO_SET_PIN+0x4e>
			{
				DDRB |= (1 << pin); 
     4aa:	44 b1       	in	r20, 0x04	; 4
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	b9 01       	movw	r22, r18
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <GPIO_SET_PIN+0x42>
     4b4:	66 0f       	add	r22, r22
     4b6:	77 1f       	adc	r23, r23
     4b8:	8a 95       	dec	r24
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <GPIO_SET_PIN+0x3e>
     4bc:	cb 01       	movw	r24, r22
     4be:	84 2b       	or	r24, r20
     4c0:	84 b9       	out	0x04, r24	; 4
     4c2:	08 95       	ret
			}
			else if(INPUT_PULLUP == status)
     4c4:	42 30       	cpi	r20, 0x02	; 2
     4c6:	09 f0       	breq	.+2      	; 0x4ca <GPIO_SET_PIN+0x54>
     4c8:	78 c0       	rjmp	.+240    	; 0x5ba <GPIO_SET_PIN+0x144>
			{
				DDRB &= ~(1 << pin); 
     4ca:	44 b1       	in	r20, 0x04	; 4
     4cc:	21 e0       	ldi	r18, 0x01	; 1
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	b9 01       	movw	r22, r18
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <GPIO_SET_PIN+0x62>
     4d4:	66 0f       	add	r22, r22
     4d6:	77 1f       	adc	r23, r23
     4d8:	8a 95       	dec	r24
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <GPIO_SET_PIN+0x5e>
     4dc:	cb 01       	movw	r24, r22
     4de:	96 2f       	mov	r25, r22
     4e0:	90 95       	com	r25
     4e2:	94 23       	and	r25, r20
     4e4:	94 b9       	out	0x04, r25	; 4
				PORTB |= (1 << pin); 	
     4e6:	95 b1       	in	r25, 0x05	; 5
     4e8:	89 2b       	or	r24, r25
     4ea:	85 b9       	out	0x05, r24	; 5
     4ec:	08 95       	ret
			}
			break;
			
		case _PORTC:
			if(INPUT == status)
     4ee:	41 11       	cpse	r20, r1
     4f0:	0e c0       	rjmp	.+28     	; 0x50e <GPIO_SET_PIN+0x98>
			{
				DDRC &= ~(1 << pin);
     4f2:	47 b1       	in	r20, 0x07	; 7
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	b9 01       	movw	r22, r18
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <GPIO_SET_PIN+0x8a>
     4fc:	66 0f       	add	r22, r22
     4fe:	77 1f       	adc	r23, r23
     500:	8a 95       	dec	r24
     502:	e2 f7       	brpl	.-8      	; 0x4fc <GPIO_SET_PIN+0x86>
     504:	cb 01       	movw	r24, r22
     506:	80 95       	com	r24
     508:	84 23       	and	r24, r20
     50a:	87 b9       	out	0x07, r24	; 7
     50c:	08 95       	ret
			}
			else if(OUTPUT == status)
     50e:	41 30       	cpi	r20, 0x01	; 1
     510:	69 f4       	brne	.+26     	; 0x52c <GPIO_SET_PIN+0xb6>
			{
				DDRC |= (1 << pin);
     512:	47 b1       	in	r20, 0x07	; 7
     514:	21 e0       	ldi	r18, 0x01	; 1
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	b9 01       	movw	r22, r18
     51a:	02 c0       	rjmp	.+4      	; 0x520 <GPIO_SET_PIN+0xaa>
     51c:	66 0f       	add	r22, r22
     51e:	77 1f       	adc	r23, r23
     520:	8a 95       	dec	r24
     522:	e2 f7       	brpl	.-8      	; 0x51c <GPIO_SET_PIN+0xa6>
     524:	cb 01       	movw	r24, r22
     526:	84 2b       	or	r24, r20
     528:	87 b9       	out	0x07, r24	; 7
     52a:	08 95       	ret
			}
			else if(INPUT_PULLUP == status)
     52c:	42 30       	cpi	r20, 0x02	; 2
     52e:	09 f0       	breq	.+2      	; 0x532 <GPIO_SET_PIN+0xbc>
     530:	44 c0       	rjmp	.+136    	; 0x5ba <GPIO_SET_PIN+0x144>
			{
				DDRC &= ~(1 << pin);
     532:	47 b1       	in	r20, 0x07	; 7
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	b9 01       	movw	r22, r18
     53a:	02 c0       	rjmp	.+4      	; 0x540 <GPIO_SET_PIN+0xca>
     53c:	66 0f       	add	r22, r22
     53e:	77 1f       	adc	r23, r23
     540:	8a 95       	dec	r24
     542:	e2 f7       	brpl	.-8      	; 0x53c <GPIO_SET_PIN+0xc6>
     544:	cb 01       	movw	r24, r22
     546:	96 2f       	mov	r25, r22
     548:	90 95       	com	r25
     54a:	94 23       	and	r25, r20
     54c:	97 b9       	out	0x07, r25	; 7
				PORTC |= (1 << pin);
     54e:	98 b1       	in	r25, 0x08	; 8
     550:	89 2b       	or	r24, r25
     552:	88 b9       	out	0x08, r24	; 8
     554:	08 95       	ret
			}
			break;
			
		case _PORTD:
			if(INPUT == status)
     556:	41 11       	cpse	r20, r1
     558:	0e c0       	rjmp	.+28     	; 0x576 <GPIO_SET_PIN+0x100>
			{
				DDRD &= ~(1 << pin);
     55a:	4a b1       	in	r20, 0x0a	; 10
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	b9 01       	movw	r22, r18
     562:	02 c0       	rjmp	.+4      	; 0x568 <GPIO_SET_PIN+0xf2>
     564:	66 0f       	add	r22, r22
     566:	77 1f       	adc	r23, r23
     568:	8a 95       	dec	r24
     56a:	e2 f7       	brpl	.-8      	; 0x564 <GPIO_SET_PIN+0xee>
     56c:	cb 01       	movw	r24, r22
     56e:	80 95       	com	r24
     570:	84 23       	and	r24, r20
     572:	8a b9       	out	0x0a, r24	; 10
     574:	08 95       	ret
			}
			else if(OUTPUT == status)
     576:	41 30       	cpi	r20, 0x01	; 1
     578:	69 f4       	brne	.+26     	; 0x594 <GPIO_SET_PIN+0x11e>
			{
				DDRD |= (1 << pin);
     57a:	4a b1       	in	r20, 0x0a	; 10
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	b9 01       	movw	r22, r18
     582:	02 c0       	rjmp	.+4      	; 0x588 <GPIO_SET_PIN+0x112>
     584:	66 0f       	add	r22, r22
     586:	77 1f       	adc	r23, r23
     588:	8a 95       	dec	r24
     58a:	e2 f7       	brpl	.-8      	; 0x584 <GPIO_SET_PIN+0x10e>
     58c:	cb 01       	movw	r24, r22
     58e:	84 2b       	or	r24, r20
     590:	8a b9       	out	0x0a, r24	; 10
     592:	08 95       	ret
			}
			else if(INPUT_PULLUP == status)
     594:	42 30       	cpi	r20, 0x02	; 2
     596:	89 f4       	brne	.+34     	; 0x5ba <GPIO_SET_PIN+0x144>
			{	
				DDRD &= ~(1 << pin);
     598:	4a b1       	in	r20, 0x0a	; 10
     59a:	21 e0       	ldi	r18, 0x01	; 1
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	b9 01       	movw	r22, r18
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <GPIO_SET_PIN+0x130>
     5a2:	66 0f       	add	r22, r22
     5a4:	77 1f       	adc	r23, r23
     5a6:	8a 95       	dec	r24
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <GPIO_SET_PIN+0x12c>
     5aa:	cb 01       	movw	r24, r22
     5ac:	96 2f       	mov	r25, r22
     5ae:	90 95       	com	r25
     5b0:	94 23       	and	r25, r20
     5b2:	9a b9       	out	0x0a, r25	; 10
				PORTD |= (1 << pin);
     5b4:	9b b1       	in	r25, 0x0b	; 11
     5b6:	89 2b       	or	r24, r25
     5b8:	8b b9       	out	0x0b, r24	; 11
     5ba:	08 95       	ret

000005bc <GPIO_WRITE_PIN>:
	}
}

void GPIO_WRITE_PIN(uint8_t pin, uint8_t port, uint8_t status)
{
	switch(port)
     5bc:	62 30       	cpi	r22, 0x02	; 2
     5be:	29 f1       	breq	.+74     	; 0x60a <GPIO_WRITE_PIN+0x4e>
     5c0:	63 30       	cpi	r22, 0x03	; 3
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <GPIO_WRITE_PIN+0xa>
     5c4:	41 c0       	rjmp	.+130    	; 0x648 <GPIO_WRITE_PIN+0x8c>
     5c6:	61 30       	cpi	r22, 0x01	; 1
     5c8:	09 f0       	breq	.+2      	; 0x5cc <GPIO_WRITE_PIN+0x10>
     5ca:	5c c0       	rjmp	.+184    	; 0x684 <GPIO_WRITE_PIN+0xc8>
	{
		case _PORTB:
			if(SET == status)
     5cc:	41 30       	cpi	r20, 0x01	; 1
     5ce:	69 f4       	brne	.+26     	; 0x5ea <GPIO_WRITE_PIN+0x2e>
			{
				PORTB |= (1 << pin);
     5d0:	45 b1       	in	r20, 0x05	; 5
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	b9 01       	movw	r22, r18
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <GPIO_WRITE_PIN+0x22>
     5da:	66 0f       	add	r22, r22
     5dc:	77 1f       	adc	r23, r23
     5de:	8a 95       	dec	r24
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <GPIO_WRITE_PIN+0x1e>
     5e2:	cb 01       	movw	r24, r22
     5e4:	84 2b       	or	r24, r20
     5e6:	85 b9       	out	0x05, r24	; 5
     5e8:	08 95       	ret
			}
			else if(RESET == status)
     5ea:	41 11       	cpse	r20, r1
     5ec:	4b c0       	rjmp	.+150    	; 0x684 <GPIO_WRITE_PIN+0xc8>
			{
				PORTB &= ~(1 << pin);
     5ee:	45 b1       	in	r20, 0x05	; 5
     5f0:	21 e0       	ldi	r18, 0x01	; 1
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	b9 01       	movw	r22, r18
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <GPIO_WRITE_PIN+0x40>
     5f8:	66 0f       	add	r22, r22
     5fa:	77 1f       	adc	r23, r23
     5fc:	8a 95       	dec	r24
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <GPIO_WRITE_PIN+0x3c>
     600:	cb 01       	movw	r24, r22
     602:	80 95       	com	r24
     604:	84 23       	and	r24, r20
     606:	85 b9       	out	0x05, r24	; 5
     608:	08 95       	ret
				//no implementation
			}					
			break;
		
		case _PORTC:
			if(SET == status)
     60a:	41 30       	cpi	r20, 0x01	; 1
     60c:	69 f4       	brne	.+26     	; 0x628 <GPIO_WRITE_PIN+0x6c>
			{
				PORTC |= (1 << pin);
     60e:	48 b1       	in	r20, 0x08	; 8
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	b9 01       	movw	r22, r18
     616:	02 c0       	rjmp	.+4      	; 0x61c <GPIO_WRITE_PIN+0x60>
     618:	66 0f       	add	r22, r22
     61a:	77 1f       	adc	r23, r23
     61c:	8a 95       	dec	r24
     61e:	e2 f7       	brpl	.-8      	; 0x618 <GPIO_WRITE_PIN+0x5c>
     620:	cb 01       	movw	r24, r22
     622:	84 2b       	or	r24, r20
     624:	88 b9       	out	0x08, r24	; 8
     626:	08 95       	ret
			}
			else if(RESET == status)
     628:	41 11       	cpse	r20, r1
     62a:	2c c0       	rjmp	.+88     	; 0x684 <GPIO_WRITE_PIN+0xc8>
			{
				PORTC &= ~(1 << pin);
     62c:	48 b1       	in	r20, 0x08	; 8
     62e:	21 e0       	ldi	r18, 0x01	; 1
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	b9 01       	movw	r22, r18
     634:	02 c0       	rjmp	.+4      	; 0x63a <GPIO_WRITE_PIN+0x7e>
     636:	66 0f       	add	r22, r22
     638:	77 1f       	adc	r23, r23
     63a:	8a 95       	dec	r24
     63c:	e2 f7       	brpl	.-8      	; 0x636 <GPIO_WRITE_PIN+0x7a>
     63e:	cb 01       	movw	r24, r22
     640:	80 95       	com	r24
     642:	84 23       	and	r24, r20
     644:	88 b9       	out	0x08, r24	; 8
     646:	08 95       	ret
				//no implementation
			}
			break;
		
		case _PORTD:
			if(SET == status)
     648:	41 30       	cpi	r20, 0x01	; 1
     64a:	69 f4       	brne	.+26     	; 0x666 <GPIO_WRITE_PIN+0xaa>
			{
				PORTD |= (1 << pin);
     64c:	4b b1       	in	r20, 0x0b	; 11
     64e:	21 e0       	ldi	r18, 0x01	; 1
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	b9 01       	movw	r22, r18
     654:	02 c0       	rjmp	.+4      	; 0x65a <GPIO_WRITE_PIN+0x9e>
     656:	66 0f       	add	r22, r22
     658:	77 1f       	adc	r23, r23
     65a:	8a 95       	dec	r24
     65c:	e2 f7       	brpl	.-8      	; 0x656 <GPIO_WRITE_PIN+0x9a>
     65e:	cb 01       	movw	r24, r22
     660:	84 2b       	or	r24, r20
     662:	8b b9       	out	0x0b, r24	; 11
     664:	08 95       	ret
			}
			else if(RESET == status)
     666:	41 11       	cpse	r20, r1
     668:	0d c0       	rjmp	.+26     	; 0x684 <GPIO_WRITE_PIN+0xc8>
			{
				PORTD &= ~(1 << pin);
     66a:	4b b1       	in	r20, 0x0b	; 11
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	b9 01       	movw	r22, r18
     672:	02 c0       	rjmp	.+4      	; 0x678 <GPIO_WRITE_PIN+0xbc>
     674:	66 0f       	add	r22, r22
     676:	77 1f       	adc	r23, r23
     678:	8a 95       	dec	r24
     67a:	e2 f7       	brpl	.-8      	; 0x674 <GPIO_WRITE_PIN+0xb8>
     67c:	cb 01       	movw	r24, r22
     67e:	80 95       	com	r24
     680:	84 23       	and	r24, r20
     682:	8b b9       	out	0x0b, r24	; 11
     684:	08 95       	ret

00000686 <SPI_INIT>:
#include <avr/io.h>
#include "SPI.h"

void SPI_INIT() 
{  
    DDRB |= (1 << DDB3)|(1 << DDB5)|(1 << DDB2);
     686:	84 b1       	in	r24, 0x04	; 4
     688:	8c 62       	ori	r24, 0x2C	; 44
     68a:	84 b9       	out	0x04, r24	; 4
    DDRB &= ~(1 << DDB4);    
     68c:	24 98       	cbi	0x04, 4	; 4
    SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     68e:	8c b5       	in	r24, 0x2c	; 44
     690:	81 65       	ori	r24, 0x51	; 81
     692:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~(1 << DORD);  // Clear the DORD bit to set MSB first (default)
     694:	8c b5       	in	r24, 0x2c	; 44
     696:	8f 7d       	andi	r24, 0xDF	; 223
     698:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 1 << PORTB2;
     69a:	2a 9a       	sbi	0x05, 2	; 5
     69c:	08 95       	ret

0000069e <TIMER_INIT>:
	static uint32_t ms = 0;
	cli();
	ms = millis_counter;
	sei();
	return ms;
}
     69e:	14 bc       	out	0x24, r1	; 36
     6a0:	15 bc       	out	0x25, r1	; 37
     6a2:	85 b5       	in	r24, 0x25	; 37
     6a4:	83 60       	ori	r24, 0x03	; 3
     6a6:	85 bd       	out	0x25, r24	; 37
     6a8:	86 e0       	ldi	r24, 0x06	; 6
     6aa:	86 bd       	out	0x26, r24	; 38
     6ac:	ee e6       	ldi	r30, 0x6E	; 110
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	81 60       	ori	r24, 0x01	; 1
     6b4:	80 83       	st	Z, r24
     6b6:	08 95       	ret

000006b8 <__vector_16>:


ISR(TIMER0_OVF_vect)
{
     6b8:	1f 92       	push	r1
     6ba:	0f 92       	push	r0
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	0f 92       	push	r0
     6c0:	11 24       	eor	r1, r1
     6c2:	8f 93       	push	r24
     6c4:	9f 93       	push	r25
     6c6:	af 93       	push	r26
     6c8:	bf 93       	push	r27
	millis_counter++;
     6ca:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <millis_counter>
     6ce:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <millis_counter+0x1>
     6d2:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <millis_counter+0x2>
     6d6:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <millis_counter+0x3>
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	a1 1d       	adc	r26, r1
     6de:	b1 1d       	adc	r27, r1
     6e0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <millis_counter>
     6e4:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <millis_counter+0x1>
     6e8:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <millis_counter+0x2>
     6ec:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <millis_counter+0x3>
     6f0:	bf 91       	pop	r27
     6f2:	af 91       	pop	r26
     6f4:	9f 91       	pop	r25
     6f6:	8f 91       	pop	r24
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <UART_INIT>:
#define F_CPU 16000000UL
#define	UBRR_VALUE ((F_CPU / (BAUD_RATE * 16UL)) - 1)

void UART_INIT() 
{	
	UBRR0H = (uint8_t)(UBRR_VALUE >> 8);
     702:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(UBRR_VALUE);	
     706:	87 e6       	ldi	r24, 0x67	; 103
     708:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     70c:	e1 ec       	ldi	r30, 0xC1	; 193
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	80 81       	ld	r24, Z
     712:	88 61       	ori	r24, 0x18	; 24
     714:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     716:	e2 ec       	ldi	r30, 0xC2	; 194
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	86 60       	ori	r24, 0x06	; 6
     71e:	80 83       	st	Z, r24
     720:	08 95       	ret

00000722 <UART_TRANSMIT>:
}

void UART_TRANSMIT(uint8_t data) 
{
	while (!(UCSR0A & (1 << UDRE0)));
     722:	e0 ec       	ldi	r30, 0xC0	; 192
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	90 81       	ld	r25, Z
     728:	95 ff       	sbrs	r25, 5
     72a:	fd cf       	rjmp	.-6      	; 0x726 <UART_TRANSMIT+0x4>
	UDR0 = data;
     72c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     730:	08 95       	ret

00000732 <UART_RECEIVE>:
}

uint8_t UART_RECEIVE()
{
	while (!(UCSR0A & (1 << RXC0))); // Wait until data is received
     732:	e0 ec       	ldi	r30, 0xC0	; 192
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	88 23       	and	r24, r24
     73a:	ec f7       	brge	.-6      	; 0x736 <UART_RECEIVE+0x4>
	return UDR0; // Get and return received data from buffer
     73c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     740:	08 95       	ret

00000742 <update_relay_status>:
static float current = 0;
static char received_data = 0;

void update_relay_status(char status)
{
	if('A' == status)
     742:	81 34       	cpi	r24, 0x41	; 65
     744:	19 f4       	brne	.+6      	; 0x74c <update_relay_status+0xa>
	{
		enable_relay();
     746:	0e 94 63 01 	call	0x2c6	; 0x2c6 <enable_relay>
     74a:	08 95       	ret
	}
	else if('B' == status)
     74c:	82 34       	cpi	r24, 0x42	; 66
     74e:	11 f4       	brne	.+4      	; 0x754 <update_relay_status+0x12>
	{
		disable_relay();
     750:	0e 94 69 01 	call	0x2d2	; 0x2d2 <disable_relay>
     754:	08 95       	ret

00000756 <main>:
	}
}

int main(void)
{
    TIMER_INIT();
     756:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_INIT>
	UART_INIT();
     75a:	0e 94 81 03 	call	0x702	; 0x702 <UART_INIT>
	ADC_INIT();
     75e:	0e 94 1a 02 	call	0x434	; 0x434 <ADC_INIT>
	SPI_INIT();	
     762:	0e 94 43 03 	call	0x686	; 0x686 <SPI_INIT>

	voltage_sensor_init();
     766:	0e 94 6f 01 	call	0x2de	; 0x2de <voltage_sensor_init>
	current_sensor_init();
     76a:	0e 94 53 00 	call	0xa6	; 0xa6 <current_sensor_init>
	relay_init();
     76e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <relay_init>
  
    while (1) 
    {

	    voltage = get_voltage_rms();
     772:	0e 94 cf 01 	call	0x39e	; 0x39e <get_voltage_rms>
     776:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <voltage>
     77a:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <voltage+0x1>
     77e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <voltage+0x2>
     782:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <voltage+0x3>
		current = get_current_rms();
     786:	0e 94 b3 00 	call	0x166	; 0x166 <get_current_rms>
     78a:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <current>
     78e:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <current+0x1>
     792:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current+0x2>
     796:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <current+0x3>
		
		print_float(voltage);
     79a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <voltage>
     79e:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <voltage+0x1>
     7a2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <voltage+0x2>
     7a6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <voltage+0x3>
     7aa:	0e 94 18 01 	call	0x230	; 0x230 <print_float>
		print("\n\r");
     7ae:	8f e0       	ldi	r24, 0x0F	; 15
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	0e 94 03 01 	call	0x206	; 0x206 <print>
		print_float(current);
     7b6:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <current>
     7ba:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <current+0x1>
     7be:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current+0x2>
     7c2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <current+0x3>
     7c6:	0e 94 18 01 	call	0x230	; 0x230 <print_float>
		print("\n\r");
     7ca:	8f e0       	ldi	r24, 0x0F	; 15
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 03 01 	call	0x206	; 0x206 <print>
		
		received_data = UART_RECEIVE();	
     7d2:	0e 94 99 03 	call	0x732	; 0x732 <UART_RECEIVE>
		
		update_relay_status(received_data);
     7d6:	0e 94 a1 03 	call	0x742	; 0x742 <update_relay_status>
				
		print("data sent\n\r");
     7da:	88 e1       	ldi	r24, 0x18	; 24
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 03 01 	call	0x206	; 0x206 <print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e2:	2f ef       	ldi	r18, 0xFF	; 255
     7e4:	89 e6       	ldi	r24, 0x69	; 105
     7e6:	98 e1       	ldi	r25, 0x18	; 24
     7e8:	21 50       	subi	r18, 0x01	; 1
     7ea:	80 40       	sbci	r24, 0x00	; 0
     7ec:	90 40       	sbci	r25, 0x00	; 0
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <main+0x92>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <main+0x9c>
     7f2:	00 00       	nop
     7f4:	be cf       	rjmp	.-132    	; 0x772 <main+0x1c>

000007f6 <__subsf3>:
     7f6:	50 58       	subi	r21, 0x80	; 128

000007f8 <__addsf3>:
     7f8:	bb 27       	eor	r27, r27
     7fa:	aa 27       	eor	r26, r26
     7fc:	0e 94 13 04 	call	0x826	; 0x826 <__addsf3x>
     800:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__fp_round>
     804:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_pscA>
     808:	38 f0       	brcs	.+14     	; 0x818 <__addsf3+0x20>
     80a:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_pscB>
     80e:	20 f0       	brcs	.+8      	; 0x818 <__addsf3+0x20>
     810:	39 f4       	brne	.+14     	; 0x820 <__addsf3+0x28>
     812:	9f 3f       	cpi	r25, 0xFF	; 255
     814:	19 f4       	brne	.+6      	; 0x81c <__addsf3+0x24>
     816:	26 f4       	brtc	.+8      	; 0x820 <__addsf3+0x28>
     818:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_nan>
     81c:	0e f4       	brtc	.+2      	; 0x820 <__addsf3+0x28>
     81e:	e0 95       	com	r30
     820:	e7 fb       	bst	r30, 7
     822:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_inf>

00000826 <__addsf3x>:
     826:	e9 2f       	mov	r30, r25
     828:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_split3>
     82c:	58 f3       	brcs	.-42     	; 0x804 <__addsf3+0xc>
     82e:	ba 17       	cp	r27, r26
     830:	62 07       	cpc	r22, r18
     832:	73 07       	cpc	r23, r19
     834:	84 07       	cpc	r24, r20
     836:	95 07       	cpc	r25, r21
     838:	20 f0       	brcs	.+8      	; 0x842 <__addsf3x+0x1c>
     83a:	79 f4       	brne	.+30     	; 0x85a <__addsf3x+0x34>
     83c:	a6 f5       	brtc	.+104    	; 0x8a6 <__addsf3x+0x80>
     83e:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__fp_zero>
     842:	0e f4       	brtc	.+2      	; 0x846 <__addsf3x+0x20>
     844:	e0 95       	com	r30
     846:	0b 2e       	mov	r0, r27
     848:	ba 2f       	mov	r27, r26
     84a:	a0 2d       	mov	r26, r0
     84c:	0b 01       	movw	r0, r22
     84e:	b9 01       	movw	r22, r18
     850:	90 01       	movw	r18, r0
     852:	0c 01       	movw	r0, r24
     854:	ca 01       	movw	r24, r20
     856:	a0 01       	movw	r20, r0
     858:	11 24       	eor	r1, r1
     85a:	ff 27       	eor	r31, r31
     85c:	59 1b       	sub	r21, r25
     85e:	99 f0       	breq	.+38     	; 0x886 <__addsf3x+0x60>
     860:	59 3f       	cpi	r21, 0xF9	; 249
     862:	50 f4       	brcc	.+20     	; 0x878 <__addsf3x+0x52>
     864:	50 3e       	cpi	r21, 0xE0	; 224
     866:	68 f1       	brcs	.+90     	; 0x8c2 <__addsf3x+0x9c>
     868:	1a 16       	cp	r1, r26
     86a:	f0 40       	sbci	r31, 0x00	; 0
     86c:	a2 2f       	mov	r26, r18
     86e:	23 2f       	mov	r18, r19
     870:	34 2f       	mov	r19, r20
     872:	44 27       	eor	r20, r20
     874:	58 5f       	subi	r21, 0xF8	; 248
     876:	f3 cf       	rjmp	.-26     	; 0x85e <__addsf3x+0x38>
     878:	46 95       	lsr	r20
     87a:	37 95       	ror	r19
     87c:	27 95       	ror	r18
     87e:	a7 95       	ror	r26
     880:	f0 40       	sbci	r31, 0x00	; 0
     882:	53 95       	inc	r21
     884:	c9 f7       	brne	.-14     	; 0x878 <__addsf3x+0x52>
     886:	7e f4       	brtc	.+30     	; 0x8a6 <__addsf3x+0x80>
     888:	1f 16       	cp	r1, r31
     88a:	ba 0b       	sbc	r27, r26
     88c:	62 0b       	sbc	r22, r18
     88e:	73 0b       	sbc	r23, r19
     890:	84 0b       	sbc	r24, r20
     892:	ba f0       	brmi	.+46     	; 0x8c2 <__addsf3x+0x9c>
     894:	91 50       	subi	r25, 0x01	; 1
     896:	a1 f0       	breq	.+40     	; 0x8c0 <__addsf3x+0x9a>
     898:	ff 0f       	add	r31, r31
     89a:	bb 1f       	adc	r27, r27
     89c:	66 1f       	adc	r22, r22
     89e:	77 1f       	adc	r23, r23
     8a0:	88 1f       	adc	r24, r24
     8a2:	c2 f7       	brpl	.-16     	; 0x894 <__addsf3x+0x6e>
     8a4:	0e c0       	rjmp	.+28     	; 0x8c2 <__addsf3x+0x9c>
     8a6:	ba 0f       	add	r27, r26
     8a8:	62 1f       	adc	r22, r18
     8aa:	73 1f       	adc	r23, r19
     8ac:	84 1f       	adc	r24, r20
     8ae:	48 f4       	brcc	.+18     	; 0x8c2 <__addsf3x+0x9c>
     8b0:	87 95       	ror	r24
     8b2:	77 95       	ror	r23
     8b4:	67 95       	ror	r22
     8b6:	b7 95       	ror	r27
     8b8:	f7 95       	ror	r31
     8ba:	9e 3f       	cpi	r25, 0xFE	; 254
     8bc:	08 f0       	brcs	.+2      	; 0x8c0 <__addsf3x+0x9a>
     8be:	b0 cf       	rjmp	.-160    	; 0x820 <__addsf3+0x28>
     8c0:	93 95       	inc	r25
     8c2:	88 0f       	add	r24, r24
     8c4:	08 f0       	brcs	.+2      	; 0x8c8 <__addsf3x+0xa2>
     8c6:	99 27       	eor	r25, r25
     8c8:	ee 0f       	add	r30, r30
     8ca:	97 95       	ror	r25
     8cc:	87 95       	ror	r24
     8ce:	08 95       	ret

000008d0 <__divsf3>:
     8d0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__divsf3x>
     8d4:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__fp_round>
     8d8:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_pscB>
     8dc:	58 f0       	brcs	.+22     	; 0x8f4 <__divsf3+0x24>
     8de:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_pscA>
     8e2:	40 f0       	brcs	.+16     	; 0x8f4 <__divsf3+0x24>
     8e4:	29 f4       	brne	.+10     	; 0x8f0 <__divsf3+0x20>
     8e6:	5f 3f       	cpi	r21, 0xFF	; 255
     8e8:	29 f0       	breq	.+10     	; 0x8f4 <__divsf3+0x24>
     8ea:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_inf>
     8ee:	51 11       	cpse	r21, r1
     8f0:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_szero>
     8f4:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_nan>

000008f8 <__divsf3x>:
     8f8:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_split3>
     8fc:	68 f3       	brcs	.-38     	; 0x8d8 <__divsf3+0x8>

000008fe <__divsf3_pse>:
     8fe:	99 23       	and	r25, r25
     900:	b1 f3       	breq	.-20     	; 0x8ee <__divsf3+0x1e>
     902:	55 23       	and	r21, r21
     904:	91 f3       	breq	.-28     	; 0x8ea <__divsf3+0x1a>
     906:	95 1b       	sub	r25, r21
     908:	55 0b       	sbc	r21, r21
     90a:	bb 27       	eor	r27, r27
     90c:	aa 27       	eor	r26, r26
     90e:	62 17       	cp	r22, r18
     910:	73 07       	cpc	r23, r19
     912:	84 07       	cpc	r24, r20
     914:	38 f0       	brcs	.+14     	; 0x924 <__stack+0x25>
     916:	9f 5f       	subi	r25, 0xFF	; 255
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	22 0f       	add	r18, r18
     91c:	33 1f       	adc	r19, r19
     91e:	44 1f       	adc	r20, r20
     920:	aa 1f       	adc	r26, r26
     922:	a9 f3       	breq	.-22     	; 0x90e <__stack+0xf>
     924:	35 d0       	rcall	.+106    	; 0x990 <__stack+0x91>
     926:	0e 2e       	mov	r0, r30
     928:	3a f0       	brmi	.+14     	; 0x938 <__stack+0x39>
     92a:	e0 e8       	ldi	r30, 0x80	; 128
     92c:	32 d0       	rcall	.+100    	; 0x992 <__stack+0x93>
     92e:	91 50       	subi	r25, 0x01	; 1
     930:	50 40       	sbci	r21, 0x00	; 0
     932:	e6 95       	lsr	r30
     934:	00 1c       	adc	r0, r0
     936:	ca f7       	brpl	.-14     	; 0x92a <__stack+0x2b>
     938:	2b d0       	rcall	.+86     	; 0x990 <__stack+0x91>
     93a:	fe 2f       	mov	r31, r30
     93c:	29 d0       	rcall	.+82     	; 0x990 <__stack+0x91>
     93e:	66 0f       	add	r22, r22
     940:	77 1f       	adc	r23, r23
     942:	88 1f       	adc	r24, r24
     944:	bb 1f       	adc	r27, r27
     946:	26 17       	cp	r18, r22
     948:	37 07       	cpc	r19, r23
     94a:	48 07       	cpc	r20, r24
     94c:	ab 07       	cpc	r26, r27
     94e:	b0 e8       	ldi	r27, 0x80	; 128
     950:	09 f0       	breq	.+2      	; 0x954 <__stack+0x55>
     952:	bb 0b       	sbc	r27, r27
     954:	80 2d       	mov	r24, r0
     956:	bf 01       	movw	r22, r30
     958:	ff 27       	eor	r31, r31
     95a:	93 58       	subi	r25, 0x83	; 131
     95c:	5f 4f       	sbci	r21, 0xFF	; 255
     95e:	3a f0       	brmi	.+14     	; 0x96e <__stack+0x6f>
     960:	9e 3f       	cpi	r25, 0xFE	; 254
     962:	51 05       	cpc	r21, r1
     964:	78 f0       	brcs	.+30     	; 0x984 <__stack+0x85>
     966:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_inf>
     96a:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_szero>
     96e:	5f 3f       	cpi	r21, 0xFF	; 255
     970:	e4 f3       	brlt	.-8      	; 0x96a <__stack+0x6b>
     972:	98 3e       	cpi	r25, 0xE8	; 232
     974:	d4 f3       	brlt	.-12     	; 0x96a <__stack+0x6b>
     976:	86 95       	lsr	r24
     978:	77 95       	ror	r23
     97a:	67 95       	ror	r22
     97c:	b7 95       	ror	r27
     97e:	f7 95       	ror	r31
     980:	9f 5f       	subi	r25, 0xFF	; 255
     982:	c9 f7       	brne	.-14     	; 0x976 <__stack+0x77>
     984:	88 0f       	add	r24, r24
     986:	91 1d       	adc	r25, r1
     988:	96 95       	lsr	r25
     98a:	87 95       	ror	r24
     98c:	97 f9       	bld	r25, 7
     98e:	08 95       	ret
     990:	e1 e0       	ldi	r30, 0x01	; 1
     992:	66 0f       	add	r22, r22
     994:	77 1f       	adc	r23, r23
     996:	88 1f       	adc	r24, r24
     998:	bb 1f       	adc	r27, r27
     99a:	62 17       	cp	r22, r18
     99c:	73 07       	cpc	r23, r19
     99e:	84 07       	cpc	r24, r20
     9a0:	ba 07       	cpc	r27, r26
     9a2:	20 f0       	brcs	.+8      	; 0x9ac <__stack+0xad>
     9a4:	62 1b       	sub	r22, r18
     9a6:	73 0b       	sbc	r23, r19
     9a8:	84 0b       	sbc	r24, r20
     9aa:	ba 0b       	sbc	r27, r26
     9ac:	ee 1f       	adc	r30, r30
     9ae:	88 f7       	brcc	.-30     	; 0x992 <__stack+0x93>
     9b0:	e0 95       	com	r30
     9b2:	08 95       	ret

000009b4 <__fixsfsi>:
     9b4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fixunssfsi>
     9b8:	68 94       	set
     9ba:	b1 11       	cpse	r27, r1
     9bc:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_szero>
     9c0:	08 95       	ret

000009c2 <__fixunssfsi>:
     9c2:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_splitA>
     9c6:	88 f0       	brcs	.+34     	; 0x9ea <__fixunssfsi+0x28>
     9c8:	9f 57       	subi	r25, 0x7F	; 127
     9ca:	98 f0       	brcs	.+38     	; 0x9f2 <__fixunssfsi+0x30>
     9cc:	b9 2f       	mov	r27, r25
     9ce:	99 27       	eor	r25, r25
     9d0:	b7 51       	subi	r27, 0x17	; 23
     9d2:	b0 f0       	brcs	.+44     	; 0xa00 <__fixunssfsi+0x3e>
     9d4:	e1 f0       	breq	.+56     	; 0xa0e <__fixunssfsi+0x4c>
     9d6:	66 0f       	add	r22, r22
     9d8:	77 1f       	adc	r23, r23
     9da:	88 1f       	adc	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	1a f0       	brmi	.+6      	; 0x9e6 <__fixunssfsi+0x24>
     9e0:	ba 95       	dec	r27
     9e2:	c9 f7       	brne	.-14     	; 0x9d6 <__fixunssfsi+0x14>
     9e4:	14 c0       	rjmp	.+40     	; 0xa0e <__fixunssfsi+0x4c>
     9e6:	b1 30       	cpi	r27, 0x01	; 1
     9e8:	91 f0       	breq	.+36     	; 0xa0e <__fixunssfsi+0x4c>
     9ea:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_zero>
     9ee:	b1 e0       	ldi	r27, 0x01	; 1
     9f0:	08 95       	ret
     9f2:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__fp_zero>
     9f6:	67 2f       	mov	r22, r23
     9f8:	78 2f       	mov	r23, r24
     9fa:	88 27       	eor	r24, r24
     9fc:	b8 5f       	subi	r27, 0xF8	; 248
     9fe:	39 f0       	breq	.+14     	; 0xa0e <__fixunssfsi+0x4c>
     a00:	b9 3f       	cpi	r27, 0xF9	; 249
     a02:	cc f3       	brlt	.-14     	; 0x9f6 <__fixunssfsi+0x34>
     a04:	86 95       	lsr	r24
     a06:	77 95       	ror	r23
     a08:	67 95       	ror	r22
     a0a:	b3 95       	inc	r27
     a0c:	d9 f7       	brne	.-10     	; 0xa04 <__fixunssfsi+0x42>
     a0e:	3e f4       	brtc	.+14     	; 0xa1e <__fixunssfsi+0x5c>
     a10:	90 95       	com	r25
     a12:	80 95       	com	r24
     a14:	70 95       	com	r23
     a16:	61 95       	neg	r22
     a18:	7f 4f       	sbci	r23, 0xFF	; 255
     a1a:	8f 4f       	sbci	r24, 0xFF	; 255
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	08 95       	ret

00000a20 <__floatunsisf>:
     a20:	e8 94       	clt
     a22:	09 c0       	rjmp	.+18     	; 0xa36 <__floatsisf+0x12>

00000a24 <__floatsisf>:
     a24:	97 fb       	bst	r25, 7
     a26:	3e f4       	brtc	.+14     	; 0xa36 <__floatsisf+0x12>
     a28:	90 95       	com	r25
     a2a:	80 95       	com	r24
     a2c:	70 95       	com	r23
     a2e:	61 95       	neg	r22
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	8f 4f       	sbci	r24, 0xFF	; 255
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	99 23       	and	r25, r25
     a38:	a9 f0       	breq	.+42     	; 0xa64 <__floatsisf+0x40>
     a3a:	f9 2f       	mov	r31, r25
     a3c:	96 e9       	ldi	r25, 0x96	; 150
     a3e:	bb 27       	eor	r27, r27
     a40:	93 95       	inc	r25
     a42:	f6 95       	lsr	r31
     a44:	87 95       	ror	r24
     a46:	77 95       	ror	r23
     a48:	67 95       	ror	r22
     a4a:	b7 95       	ror	r27
     a4c:	f1 11       	cpse	r31, r1
     a4e:	f8 cf       	rjmp	.-16     	; 0xa40 <__floatsisf+0x1c>
     a50:	fa f4       	brpl	.+62     	; 0xa90 <__floatsisf+0x6c>
     a52:	bb 0f       	add	r27, r27
     a54:	11 f4       	brne	.+4      	; 0xa5a <__floatsisf+0x36>
     a56:	60 ff       	sbrs	r22, 0
     a58:	1b c0       	rjmp	.+54     	; 0xa90 <__floatsisf+0x6c>
     a5a:	6f 5f       	subi	r22, 0xFF	; 255
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	8f 4f       	sbci	r24, 0xFF	; 255
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	16 c0       	rjmp	.+44     	; 0xa90 <__floatsisf+0x6c>
     a64:	88 23       	and	r24, r24
     a66:	11 f0       	breq	.+4      	; 0xa6c <__floatsisf+0x48>
     a68:	96 e9       	ldi	r25, 0x96	; 150
     a6a:	11 c0       	rjmp	.+34     	; 0xa8e <__floatsisf+0x6a>
     a6c:	77 23       	and	r23, r23
     a6e:	21 f0       	breq	.+8      	; 0xa78 <__floatsisf+0x54>
     a70:	9e e8       	ldi	r25, 0x8E	; 142
     a72:	87 2f       	mov	r24, r23
     a74:	76 2f       	mov	r23, r22
     a76:	05 c0       	rjmp	.+10     	; 0xa82 <__floatsisf+0x5e>
     a78:	66 23       	and	r22, r22
     a7a:	71 f0       	breq	.+28     	; 0xa98 <__floatsisf+0x74>
     a7c:	96 e8       	ldi	r25, 0x86	; 134
     a7e:	86 2f       	mov	r24, r22
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	2a f0       	brmi	.+10     	; 0xa90 <__floatsisf+0x6c>
     a86:	9a 95       	dec	r25
     a88:	66 0f       	add	r22, r22
     a8a:	77 1f       	adc	r23, r23
     a8c:	88 1f       	adc	r24, r24
     a8e:	da f7       	brpl	.-10     	; 0xa86 <__floatsisf+0x62>
     a90:	88 0f       	add	r24, r24
     a92:	96 95       	lsr	r25
     a94:	87 95       	ror	r24
     a96:	97 f9       	bld	r25, 7
     a98:	08 95       	ret

00000a9a <__fp_inf>:
     a9a:	97 f9       	bld	r25, 7
     a9c:	9f 67       	ori	r25, 0x7F	; 127
     a9e:	80 e8       	ldi	r24, 0x80	; 128
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	08 95       	ret

00000aa6 <__fp_nan>:
     aa6:	9f ef       	ldi	r25, 0xFF	; 255
     aa8:	80 ec       	ldi	r24, 0xC0	; 192
     aaa:	08 95       	ret

00000aac <__fp_pscA>:
     aac:	00 24       	eor	r0, r0
     aae:	0a 94       	dec	r0
     ab0:	16 16       	cp	r1, r22
     ab2:	17 06       	cpc	r1, r23
     ab4:	18 06       	cpc	r1, r24
     ab6:	09 06       	cpc	r0, r25
     ab8:	08 95       	ret

00000aba <__fp_pscB>:
     aba:	00 24       	eor	r0, r0
     abc:	0a 94       	dec	r0
     abe:	12 16       	cp	r1, r18
     ac0:	13 06       	cpc	r1, r19
     ac2:	14 06       	cpc	r1, r20
     ac4:	05 06       	cpc	r0, r21
     ac6:	08 95       	ret

00000ac8 <__fp_round>:
     ac8:	09 2e       	mov	r0, r25
     aca:	03 94       	inc	r0
     acc:	00 0c       	add	r0, r0
     ace:	11 f4       	brne	.+4      	; 0xad4 <__fp_round+0xc>
     ad0:	88 23       	and	r24, r24
     ad2:	52 f0       	brmi	.+20     	; 0xae8 <__fp_round+0x20>
     ad4:	bb 0f       	add	r27, r27
     ad6:	40 f4       	brcc	.+16     	; 0xae8 <__fp_round+0x20>
     ad8:	bf 2b       	or	r27, r31
     ada:	11 f4       	brne	.+4      	; 0xae0 <__fp_round+0x18>
     adc:	60 ff       	sbrs	r22, 0
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <__fp_round+0x20>
     ae0:	6f 5f       	subi	r22, 0xFF	; 255
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	8f 4f       	sbci	r24, 0xFF	; 255
     ae6:	9f 4f       	sbci	r25, 0xFF	; 255
     ae8:	08 95       	ret

00000aea <__fp_split3>:
     aea:	57 fd       	sbrc	r21, 7
     aec:	90 58       	subi	r25, 0x80	; 128
     aee:	44 0f       	add	r20, r20
     af0:	55 1f       	adc	r21, r21
     af2:	59 f0       	breq	.+22     	; 0xb0a <__fp_splitA+0x10>
     af4:	5f 3f       	cpi	r21, 0xFF	; 255
     af6:	71 f0       	breq	.+28     	; 0xb14 <__fp_splitA+0x1a>
     af8:	47 95       	ror	r20

00000afa <__fp_splitA>:
     afa:	88 0f       	add	r24, r24
     afc:	97 fb       	bst	r25, 7
     afe:	99 1f       	adc	r25, r25
     b00:	61 f0       	breq	.+24     	; 0xb1a <__fp_splitA+0x20>
     b02:	9f 3f       	cpi	r25, 0xFF	; 255
     b04:	79 f0       	breq	.+30     	; 0xb24 <__fp_splitA+0x2a>
     b06:	87 95       	ror	r24
     b08:	08 95       	ret
     b0a:	12 16       	cp	r1, r18
     b0c:	13 06       	cpc	r1, r19
     b0e:	14 06       	cpc	r1, r20
     b10:	55 1f       	adc	r21, r21
     b12:	f2 cf       	rjmp	.-28     	; 0xaf8 <__fp_split3+0xe>
     b14:	46 95       	lsr	r20
     b16:	f1 df       	rcall	.-30     	; 0xafa <__fp_splitA>
     b18:	08 c0       	rjmp	.+16     	; 0xb2a <__fp_splitA+0x30>
     b1a:	16 16       	cp	r1, r22
     b1c:	17 06       	cpc	r1, r23
     b1e:	18 06       	cpc	r1, r24
     b20:	99 1f       	adc	r25, r25
     b22:	f1 cf       	rjmp	.-30     	; 0xb06 <__fp_splitA+0xc>
     b24:	86 95       	lsr	r24
     b26:	71 05       	cpc	r23, r1
     b28:	61 05       	cpc	r22, r1
     b2a:	08 94       	sec
     b2c:	08 95       	ret

00000b2e <__fp_zero>:
     b2e:	e8 94       	clt

00000b30 <__fp_szero>:
     b30:	bb 27       	eor	r27, r27
     b32:	66 27       	eor	r22, r22
     b34:	77 27       	eor	r23, r23
     b36:	cb 01       	movw	r24, r22
     b38:	97 f9       	bld	r25, 7
     b3a:	08 95       	ret

00000b3c <__mulsf3>:
     b3c:	0e 94 b1 05 	call	0xb62	; 0xb62 <__mulsf3x>
     b40:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__fp_round>
     b44:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_pscA>
     b48:	38 f0       	brcs	.+14     	; 0xb58 <__mulsf3+0x1c>
     b4a:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_pscB>
     b4e:	20 f0       	brcs	.+8      	; 0xb58 <__mulsf3+0x1c>
     b50:	95 23       	and	r25, r21
     b52:	11 f0       	breq	.+4      	; 0xb58 <__mulsf3+0x1c>
     b54:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_inf>
     b58:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_nan>
     b5c:	11 24       	eor	r1, r1
     b5e:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_szero>

00000b62 <__mulsf3x>:
     b62:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_split3>
     b66:	70 f3       	brcs	.-36     	; 0xb44 <__mulsf3+0x8>

00000b68 <__mulsf3_pse>:
     b68:	95 9f       	mul	r25, r21
     b6a:	c1 f3       	breq	.-16     	; 0xb5c <__mulsf3+0x20>
     b6c:	95 0f       	add	r25, r21
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	55 1f       	adc	r21, r21
     b72:	62 9f       	mul	r22, r18
     b74:	f0 01       	movw	r30, r0
     b76:	72 9f       	mul	r23, r18
     b78:	bb 27       	eor	r27, r27
     b7a:	f0 0d       	add	r31, r0
     b7c:	b1 1d       	adc	r27, r1
     b7e:	63 9f       	mul	r22, r19
     b80:	aa 27       	eor	r26, r26
     b82:	f0 0d       	add	r31, r0
     b84:	b1 1d       	adc	r27, r1
     b86:	aa 1f       	adc	r26, r26
     b88:	64 9f       	mul	r22, r20
     b8a:	66 27       	eor	r22, r22
     b8c:	b0 0d       	add	r27, r0
     b8e:	a1 1d       	adc	r26, r1
     b90:	66 1f       	adc	r22, r22
     b92:	82 9f       	mul	r24, r18
     b94:	22 27       	eor	r18, r18
     b96:	b0 0d       	add	r27, r0
     b98:	a1 1d       	adc	r26, r1
     b9a:	62 1f       	adc	r22, r18
     b9c:	73 9f       	mul	r23, r19
     b9e:	b0 0d       	add	r27, r0
     ba0:	a1 1d       	adc	r26, r1
     ba2:	62 1f       	adc	r22, r18
     ba4:	83 9f       	mul	r24, r19
     ba6:	a0 0d       	add	r26, r0
     ba8:	61 1d       	adc	r22, r1
     baa:	22 1f       	adc	r18, r18
     bac:	74 9f       	mul	r23, r20
     bae:	33 27       	eor	r19, r19
     bb0:	a0 0d       	add	r26, r0
     bb2:	61 1d       	adc	r22, r1
     bb4:	23 1f       	adc	r18, r19
     bb6:	84 9f       	mul	r24, r20
     bb8:	60 0d       	add	r22, r0
     bba:	21 1d       	adc	r18, r1
     bbc:	82 2f       	mov	r24, r18
     bbe:	76 2f       	mov	r23, r22
     bc0:	6a 2f       	mov	r22, r26
     bc2:	11 24       	eor	r1, r1
     bc4:	9f 57       	subi	r25, 0x7F	; 127
     bc6:	50 40       	sbci	r21, 0x00	; 0
     bc8:	9a f0       	brmi	.+38     	; 0xbf0 <__mulsf3_pse+0x88>
     bca:	f1 f0       	breq	.+60     	; 0xc08 <__mulsf3_pse+0xa0>
     bcc:	88 23       	and	r24, r24
     bce:	4a f0       	brmi	.+18     	; 0xbe2 <__mulsf3_pse+0x7a>
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	bb 1f       	adc	r27, r27
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	88 1f       	adc	r24, r24
     bdc:	91 50       	subi	r25, 0x01	; 1
     bde:	50 40       	sbci	r21, 0x00	; 0
     be0:	a9 f7       	brne	.-22     	; 0xbcc <__mulsf3_pse+0x64>
     be2:	9e 3f       	cpi	r25, 0xFE	; 254
     be4:	51 05       	cpc	r21, r1
     be6:	80 f0       	brcs	.+32     	; 0xc08 <__mulsf3_pse+0xa0>
     be8:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_inf>
     bec:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_szero>
     bf0:	5f 3f       	cpi	r21, 0xFF	; 255
     bf2:	e4 f3       	brlt	.-8      	; 0xbec <__mulsf3_pse+0x84>
     bf4:	98 3e       	cpi	r25, 0xE8	; 232
     bf6:	d4 f3       	brlt	.-12     	; 0xbec <__mulsf3_pse+0x84>
     bf8:	86 95       	lsr	r24
     bfa:	77 95       	ror	r23
     bfc:	67 95       	ror	r22
     bfe:	b7 95       	ror	r27
     c00:	f7 95       	ror	r31
     c02:	e7 95       	ror	r30
     c04:	9f 5f       	subi	r25, 0xFF	; 255
     c06:	c1 f7       	brne	.-16     	; 0xbf8 <__mulsf3_pse+0x90>
     c08:	fe 2b       	or	r31, r30
     c0a:	88 0f       	add	r24, r24
     c0c:	91 1d       	adc	r25, r1
     c0e:	96 95       	lsr	r25
     c10:	87 95       	ror	r24
     c12:	97 f9       	bld	r25, 7
     c14:	08 95       	ret

00000c16 <sprintf>:
     c16:	ae e0       	ldi	r26, 0x0E	; 14
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e1 e1       	ldi	r30, 0x11	; 17
     c1c:	f6 e0       	ldi	r31, 0x06	; 6
     c1e:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__prologue_saves__+0x1c>
     c22:	0d 89       	ldd	r16, Y+21	; 0x15
     c24:	1e 89       	ldd	r17, Y+22	; 0x16
     c26:	86 e0       	ldi	r24, 0x06	; 6
     c28:	8c 83       	std	Y+4, r24	; 0x04
     c2a:	1a 83       	std	Y+2, r17	; 0x02
     c2c:	09 83       	std	Y+1, r16	; 0x01
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	9f e7       	ldi	r25, 0x7F	; 127
     c32:	9e 83       	std	Y+6, r25	; 0x06
     c34:	8d 83       	std	Y+5, r24	; 0x05
     c36:	ae 01       	movw	r20, r28
     c38:	47 5e       	subi	r20, 0xE7	; 231
     c3a:	5f 4f       	sbci	r21, 0xFF	; 255
     c3c:	6f 89       	ldd	r22, Y+23	; 0x17
     c3e:	78 8d       	ldd	r23, Y+24	; 0x18
     c40:	ce 01       	movw	r24, r28
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vfprintf>
     c48:	ef 81       	ldd	r30, Y+7	; 0x07
     c4a:	f8 85       	ldd	r31, Y+8	; 0x08
     c4c:	e0 0f       	add	r30, r16
     c4e:	f1 1f       	adc	r31, r17
     c50:	10 82       	st	Z, r1
     c52:	2e 96       	adiw	r28, 0x0e	; 14
     c54:	e4 e0       	ldi	r30, 0x04	; 4
     c56:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__epilogue_restores__+0x1c>

00000c5a <vfprintf>:
     c5a:	ab e0       	ldi	r26, 0x0B	; 11
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e3 e3       	ldi	r30, 0x33	; 51
     c60:	f6 e0       	ldi	r31, 0x06	; 6
     c62:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__prologue_saves__>
     c66:	6c 01       	movw	r12, r24
     c68:	7b 01       	movw	r14, r22
     c6a:	8a 01       	movw	r16, r20
     c6c:	fc 01       	movw	r30, r24
     c6e:	17 82       	std	Z+7, r1	; 0x07
     c70:	16 82       	std	Z+6, r1	; 0x06
     c72:	83 81       	ldd	r24, Z+3	; 0x03
     c74:	81 ff       	sbrs	r24, 1
     c76:	cc c1       	rjmp	.+920    	; 0x1010 <vfprintf+0x3b6>
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	3c 01       	movw	r6, r24
     c7e:	f6 01       	movw	r30, r12
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	f7 01       	movw	r30, r14
     c84:	93 fd       	sbrc	r25, 3
     c86:	85 91       	lpm	r24, Z+
     c88:	93 ff       	sbrs	r25, 3
     c8a:	81 91       	ld	r24, Z+
     c8c:	7f 01       	movw	r14, r30
     c8e:	88 23       	and	r24, r24
     c90:	09 f4       	brne	.+2      	; 0xc94 <vfprintf+0x3a>
     c92:	ba c1       	rjmp	.+884    	; 0x1008 <vfprintf+0x3ae>
     c94:	85 32       	cpi	r24, 0x25	; 37
     c96:	39 f4       	brne	.+14     	; 0xca6 <vfprintf+0x4c>
     c98:	93 fd       	sbrc	r25, 3
     c9a:	85 91       	lpm	r24, Z+
     c9c:	93 ff       	sbrs	r25, 3
     c9e:	81 91       	ld	r24, Z+
     ca0:	7f 01       	movw	r14, r30
     ca2:	85 32       	cpi	r24, 0x25	; 37
     ca4:	29 f4       	brne	.+10     	; 0xcb0 <vfprintf+0x56>
     ca6:	b6 01       	movw	r22, r12
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
     cae:	e7 cf       	rjmp	.-50     	; 0xc7e <vfprintf+0x24>
     cb0:	91 2c       	mov	r9, r1
     cb2:	21 2c       	mov	r2, r1
     cb4:	31 2c       	mov	r3, r1
     cb6:	ff e1       	ldi	r31, 0x1F	; 31
     cb8:	f3 15       	cp	r31, r3
     cba:	d8 f0       	brcs	.+54     	; 0xcf2 <vfprintf+0x98>
     cbc:	8b 32       	cpi	r24, 0x2B	; 43
     cbe:	79 f0       	breq	.+30     	; 0xcde <vfprintf+0x84>
     cc0:	38 f4       	brcc	.+14     	; 0xcd0 <vfprintf+0x76>
     cc2:	80 32       	cpi	r24, 0x20	; 32
     cc4:	79 f0       	breq	.+30     	; 0xce4 <vfprintf+0x8a>
     cc6:	83 32       	cpi	r24, 0x23	; 35
     cc8:	a1 f4       	brne	.+40     	; 0xcf2 <vfprintf+0x98>
     cca:	23 2d       	mov	r18, r3
     ccc:	20 61       	ori	r18, 0x10	; 16
     cce:	1d c0       	rjmp	.+58     	; 0xd0a <vfprintf+0xb0>
     cd0:	8d 32       	cpi	r24, 0x2D	; 45
     cd2:	61 f0       	breq	.+24     	; 0xcec <vfprintf+0x92>
     cd4:	80 33       	cpi	r24, 0x30	; 48
     cd6:	69 f4       	brne	.+26     	; 0xcf2 <vfprintf+0x98>
     cd8:	23 2d       	mov	r18, r3
     cda:	21 60       	ori	r18, 0x01	; 1
     cdc:	16 c0       	rjmp	.+44     	; 0xd0a <vfprintf+0xb0>
     cde:	83 2d       	mov	r24, r3
     ce0:	82 60       	ori	r24, 0x02	; 2
     ce2:	38 2e       	mov	r3, r24
     ce4:	e3 2d       	mov	r30, r3
     ce6:	e4 60       	ori	r30, 0x04	; 4
     ce8:	3e 2e       	mov	r3, r30
     cea:	2a c0       	rjmp	.+84     	; 0xd40 <vfprintf+0xe6>
     cec:	f3 2d       	mov	r31, r3
     cee:	f8 60       	ori	r31, 0x08	; 8
     cf0:	1d c0       	rjmp	.+58     	; 0xd2c <vfprintf+0xd2>
     cf2:	37 fc       	sbrc	r3, 7
     cf4:	2d c0       	rjmp	.+90     	; 0xd50 <vfprintf+0xf6>
     cf6:	20 ed       	ldi	r18, 0xD0	; 208
     cf8:	28 0f       	add	r18, r24
     cfa:	2a 30       	cpi	r18, 0x0A	; 10
     cfc:	40 f0       	brcs	.+16     	; 0xd0e <vfprintf+0xb4>
     cfe:	8e 32       	cpi	r24, 0x2E	; 46
     d00:	b9 f4       	brne	.+46     	; 0xd30 <vfprintf+0xd6>
     d02:	36 fc       	sbrc	r3, 6
     d04:	81 c1       	rjmp	.+770    	; 0x1008 <vfprintf+0x3ae>
     d06:	23 2d       	mov	r18, r3
     d08:	20 64       	ori	r18, 0x40	; 64
     d0a:	32 2e       	mov	r3, r18
     d0c:	19 c0       	rjmp	.+50     	; 0xd40 <vfprintf+0xe6>
     d0e:	36 fe       	sbrs	r3, 6
     d10:	06 c0       	rjmp	.+12     	; 0xd1e <vfprintf+0xc4>
     d12:	8a e0       	ldi	r24, 0x0A	; 10
     d14:	98 9e       	mul	r9, r24
     d16:	20 0d       	add	r18, r0
     d18:	11 24       	eor	r1, r1
     d1a:	92 2e       	mov	r9, r18
     d1c:	11 c0       	rjmp	.+34     	; 0xd40 <vfprintf+0xe6>
     d1e:	ea e0       	ldi	r30, 0x0A	; 10
     d20:	2e 9e       	mul	r2, r30
     d22:	20 0d       	add	r18, r0
     d24:	11 24       	eor	r1, r1
     d26:	22 2e       	mov	r2, r18
     d28:	f3 2d       	mov	r31, r3
     d2a:	f0 62       	ori	r31, 0x20	; 32
     d2c:	3f 2e       	mov	r3, r31
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <vfprintf+0xe6>
     d30:	8c 36       	cpi	r24, 0x6C	; 108
     d32:	21 f4       	brne	.+8      	; 0xd3c <vfprintf+0xe2>
     d34:	83 2d       	mov	r24, r3
     d36:	80 68       	ori	r24, 0x80	; 128
     d38:	38 2e       	mov	r3, r24
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <vfprintf+0xe6>
     d3c:	88 36       	cpi	r24, 0x68	; 104
     d3e:	41 f4       	brne	.+16     	; 0xd50 <vfprintf+0xf6>
     d40:	f7 01       	movw	r30, r14
     d42:	93 fd       	sbrc	r25, 3
     d44:	85 91       	lpm	r24, Z+
     d46:	93 ff       	sbrs	r25, 3
     d48:	81 91       	ld	r24, Z+
     d4a:	7f 01       	movw	r14, r30
     d4c:	81 11       	cpse	r24, r1
     d4e:	b3 cf       	rjmp	.-154    	; 0xcb6 <vfprintf+0x5c>
     d50:	98 2f       	mov	r25, r24
     d52:	9f 7d       	andi	r25, 0xDF	; 223
     d54:	95 54       	subi	r25, 0x45	; 69
     d56:	93 30       	cpi	r25, 0x03	; 3
     d58:	28 f4       	brcc	.+10     	; 0xd64 <vfprintf+0x10a>
     d5a:	0c 5f       	subi	r16, 0xFC	; 252
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	9f e3       	ldi	r25, 0x3F	; 63
     d60:	99 83       	std	Y+1, r25	; 0x01
     d62:	0d c0       	rjmp	.+26     	; 0xd7e <vfprintf+0x124>
     d64:	83 36       	cpi	r24, 0x63	; 99
     d66:	31 f0       	breq	.+12     	; 0xd74 <vfprintf+0x11a>
     d68:	83 37       	cpi	r24, 0x73	; 115
     d6a:	71 f0       	breq	.+28     	; 0xd88 <vfprintf+0x12e>
     d6c:	83 35       	cpi	r24, 0x53	; 83
     d6e:	09 f0       	breq	.+2      	; 0xd72 <vfprintf+0x118>
     d70:	59 c0       	rjmp	.+178    	; 0xe24 <vfprintf+0x1ca>
     d72:	21 c0       	rjmp	.+66     	; 0xdb6 <vfprintf+0x15c>
     d74:	f8 01       	movw	r30, r16
     d76:	80 81       	ld	r24, Z
     d78:	89 83       	std	Y+1, r24	; 0x01
     d7a:	0e 5f       	subi	r16, 0xFE	; 254
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	88 24       	eor	r8, r8
     d80:	83 94       	inc	r8
     d82:	91 2c       	mov	r9, r1
     d84:	53 01       	movw	r10, r6
     d86:	13 c0       	rjmp	.+38     	; 0xdae <vfprintf+0x154>
     d88:	28 01       	movw	r4, r16
     d8a:	f2 e0       	ldi	r31, 0x02	; 2
     d8c:	4f 0e       	add	r4, r31
     d8e:	51 1c       	adc	r5, r1
     d90:	f8 01       	movw	r30, r16
     d92:	a0 80       	ld	r10, Z
     d94:	b1 80       	ldd	r11, Z+1	; 0x01
     d96:	36 fe       	sbrs	r3, 6
     d98:	03 c0       	rjmp	.+6      	; 0xda0 <vfprintf+0x146>
     d9a:	69 2d       	mov	r22, r9
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0x14a>
     da0:	6f ef       	ldi	r22, 0xFF	; 255
     da2:	7f ef       	ldi	r23, 0xFF	; 255
     da4:	c5 01       	movw	r24, r10
     da6:	0e 94 19 08 	call	0x1032	; 0x1032 <strnlen>
     daa:	4c 01       	movw	r8, r24
     dac:	82 01       	movw	r16, r4
     dae:	f3 2d       	mov	r31, r3
     db0:	ff 77       	andi	r31, 0x7F	; 127
     db2:	3f 2e       	mov	r3, r31
     db4:	16 c0       	rjmp	.+44     	; 0xde2 <vfprintf+0x188>
     db6:	28 01       	movw	r4, r16
     db8:	22 e0       	ldi	r18, 0x02	; 2
     dba:	42 0e       	add	r4, r18
     dbc:	51 1c       	adc	r5, r1
     dbe:	f8 01       	movw	r30, r16
     dc0:	a0 80       	ld	r10, Z
     dc2:	b1 80       	ldd	r11, Z+1	; 0x01
     dc4:	36 fe       	sbrs	r3, 6
     dc6:	03 c0       	rjmp	.+6      	; 0xdce <vfprintf+0x174>
     dc8:	69 2d       	mov	r22, r9
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <vfprintf+0x178>
     dce:	6f ef       	ldi	r22, 0xFF	; 255
     dd0:	7f ef       	ldi	r23, 0xFF	; 255
     dd2:	c5 01       	movw	r24, r10
     dd4:	0e 94 0e 08 	call	0x101c	; 0x101c <strnlen_P>
     dd8:	4c 01       	movw	r8, r24
     dda:	f3 2d       	mov	r31, r3
     ddc:	f0 68       	ori	r31, 0x80	; 128
     dde:	3f 2e       	mov	r3, r31
     de0:	82 01       	movw	r16, r4
     de2:	33 fc       	sbrc	r3, 3
     de4:	1b c0       	rjmp	.+54     	; 0xe1c <vfprintf+0x1c2>
     de6:	82 2d       	mov	r24, r2
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	88 16       	cp	r8, r24
     dec:	99 06       	cpc	r9, r25
     dee:	b0 f4       	brcc	.+44     	; 0xe1c <vfprintf+0x1c2>
     df0:	b6 01       	movw	r22, r12
     df2:	80 e2       	ldi	r24, 0x20	; 32
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
     dfa:	2a 94       	dec	r2
     dfc:	f4 cf       	rjmp	.-24     	; 0xde6 <vfprintf+0x18c>
     dfe:	f5 01       	movw	r30, r10
     e00:	37 fc       	sbrc	r3, 7
     e02:	85 91       	lpm	r24, Z+
     e04:	37 fe       	sbrs	r3, 7
     e06:	81 91       	ld	r24, Z+
     e08:	5f 01       	movw	r10, r30
     e0a:	b6 01       	movw	r22, r12
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
     e12:	21 10       	cpse	r2, r1
     e14:	2a 94       	dec	r2
     e16:	21 e0       	ldi	r18, 0x01	; 1
     e18:	82 1a       	sub	r8, r18
     e1a:	91 08       	sbc	r9, r1
     e1c:	81 14       	cp	r8, r1
     e1e:	91 04       	cpc	r9, r1
     e20:	71 f7       	brne	.-36     	; 0xdfe <vfprintf+0x1a4>
     e22:	e8 c0       	rjmp	.+464    	; 0xff4 <vfprintf+0x39a>
     e24:	84 36       	cpi	r24, 0x64	; 100
     e26:	11 f0       	breq	.+4      	; 0xe2c <vfprintf+0x1d2>
     e28:	89 36       	cpi	r24, 0x69	; 105
     e2a:	41 f5       	brne	.+80     	; 0xe7c <vfprintf+0x222>
     e2c:	f8 01       	movw	r30, r16
     e2e:	37 fe       	sbrs	r3, 7
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <vfprintf+0x1e6>
     e32:	60 81       	ld	r22, Z
     e34:	71 81       	ldd	r23, Z+1	; 0x01
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	0c 5f       	subi	r16, 0xFC	; 252
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
     e3e:	08 c0       	rjmp	.+16     	; 0xe50 <vfprintf+0x1f6>
     e40:	60 81       	ld	r22, Z
     e42:	71 81       	ldd	r23, Z+1	; 0x01
     e44:	07 2e       	mov	r0, r23
     e46:	00 0c       	add	r0, r0
     e48:	88 0b       	sbc	r24, r24
     e4a:	99 0b       	sbc	r25, r25
     e4c:	0e 5f       	subi	r16, 0xFE	; 254
     e4e:	1f 4f       	sbci	r17, 0xFF	; 255
     e50:	f3 2d       	mov	r31, r3
     e52:	ff 76       	andi	r31, 0x6F	; 111
     e54:	3f 2e       	mov	r3, r31
     e56:	97 ff       	sbrs	r25, 7
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <vfprintf+0x212>
     e5a:	90 95       	com	r25
     e5c:	80 95       	com	r24
     e5e:	70 95       	com	r23
     e60:	61 95       	neg	r22
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	8f 4f       	sbci	r24, 0xFF	; 255
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	f0 68       	ori	r31, 0x80	; 128
     e6a:	3f 2e       	mov	r3, r31
     e6c:	2a e0       	ldi	r18, 0x0A	; 10
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	a3 01       	movw	r20, r6
     e72:	0e 94 24 08 	call	0x1048	; 0x1048 <__ultoa_invert>
     e76:	88 2e       	mov	r8, r24
     e78:	86 18       	sub	r8, r6
     e7a:	45 c0       	rjmp	.+138    	; 0xf06 <vfprintf+0x2ac>
     e7c:	85 37       	cpi	r24, 0x75	; 117
     e7e:	31 f4       	brne	.+12     	; 0xe8c <vfprintf+0x232>
     e80:	23 2d       	mov	r18, r3
     e82:	2f 7e       	andi	r18, 0xEF	; 239
     e84:	b2 2e       	mov	r11, r18
     e86:	2a e0       	ldi	r18, 0x0A	; 10
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	25 c0       	rjmp	.+74     	; 0xed6 <vfprintf+0x27c>
     e8c:	93 2d       	mov	r25, r3
     e8e:	99 7f       	andi	r25, 0xF9	; 249
     e90:	b9 2e       	mov	r11, r25
     e92:	8f 36       	cpi	r24, 0x6F	; 111
     e94:	c1 f0       	breq	.+48     	; 0xec6 <vfprintf+0x26c>
     e96:	18 f4       	brcc	.+6      	; 0xe9e <vfprintf+0x244>
     e98:	88 35       	cpi	r24, 0x58	; 88
     e9a:	79 f0       	breq	.+30     	; 0xeba <vfprintf+0x260>
     e9c:	b5 c0       	rjmp	.+362    	; 0x1008 <vfprintf+0x3ae>
     e9e:	80 37       	cpi	r24, 0x70	; 112
     ea0:	19 f0       	breq	.+6      	; 0xea8 <vfprintf+0x24e>
     ea2:	88 37       	cpi	r24, 0x78	; 120
     ea4:	21 f0       	breq	.+8      	; 0xeae <vfprintf+0x254>
     ea6:	b0 c0       	rjmp	.+352    	; 0x1008 <vfprintf+0x3ae>
     ea8:	e9 2f       	mov	r30, r25
     eaa:	e0 61       	ori	r30, 0x10	; 16
     eac:	be 2e       	mov	r11, r30
     eae:	b4 fe       	sbrs	r11, 4
     eb0:	0d c0       	rjmp	.+26     	; 0xecc <vfprintf+0x272>
     eb2:	fb 2d       	mov	r31, r11
     eb4:	f4 60       	ori	r31, 0x04	; 4
     eb6:	bf 2e       	mov	r11, r31
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <vfprintf+0x272>
     eba:	34 fe       	sbrs	r3, 4
     ebc:	0a c0       	rjmp	.+20     	; 0xed2 <vfprintf+0x278>
     ebe:	29 2f       	mov	r18, r25
     ec0:	26 60       	ori	r18, 0x06	; 6
     ec2:	b2 2e       	mov	r11, r18
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <vfprintf+0x278>
     ec6:	28 e0       	ldi	r18, 0x08	; 8
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <vfprintf+0x27c>
     ecc:	20 e1       	ldi	r18, 0x10	; 16
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0x27c>
     ed2:	20 e1       	ldi	r18, 0x10	; 16
     ed4:	32 e0       	ldi	r19, 0x02	; 2
     ed6:	f8 01       	movw	r30, r16
     ed8:	b7 fe       	sbrs	r11, 7
     eda:	07 c0       	rjmp	.+14     	; 0xeea <vfprintf+0x290>
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	0c 5f       	subi	r16, 0xFC	; 252
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <vfprintf+0x29c>
     eea:	60 81       	ld	r22, Z
     eec:	71 81       	ldd	r23, Z+1	; 0x01
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 5f       	subi	r16, 0xFE	; 254
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	a3 01       	movw	r20, r6
     ef8:	0e 94 24 08 	call	0x1048	; 0x1048 <__ultoa_invert>
     efc:	88 2e       	mov	r8, r24
     efe:	86 18       	sub	r8, r6
     f00:	fb 2d       	mov	r31, r11
     f02:	ff 77       	andi	r31, 0x7F	; 127
     f04:	3f 2e       	mov	r3, r31
     f06:	36 fe       	sbrs	r3, 6
     f08:	0d c0       	rjmp	.+26     	; 0xf24 <vfprintf+0x2ca>
     f0a:	23 2d       	mov	r18, r3
     f0c:	2e 7f       	andi	r18, 0xFE	; 254
     f0e:	a2 2e       	mov	r10, r18
     f10:	89 14       	cp	r8, r9
     f12:	58 f4       	brcc	.+22     	; 0xf2a <vfprintf+0x2d0>
     f14:	34 fe       	sbrs	r3, 4
     f16:	0b c0       	rjmp	.+22     	; 0xf2e <vfprintf+0x2d4>
     f18:	32 fc       	sbrc	r3, 2
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <vfprintf+0x2d4>
     f1c:	83 2d       	mov	r24, r3
     f1e:	8e 7e       	andi	r24, 0xEE	; 238
     f20:	a8 2e       	mov	r10, r24
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <vfprintf+0x2d4>
     f24:	b8 2c       	mov	r11, r8
     f26:	a3 2c       	mov	r10, r3
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <vfprintf+0x2d6>
     f2a:	b8 2c       	mov	r11, r8
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <vfprintf+0x2d6>
     f2e:	b9 2c       	mov	r11, r9
     f30:	a4 fe       	sbrs	r10, 4
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <vfprintf+0x2f8>
     f34:	fe 01       	movw	r30, r28
     f36:	e8 0d       	add	r30, r8
     f38:	f1 1d       	adc	r31, r1
     f3a:	80 81       	ld	r24, Z
     f3c:	80 33       	cpi	r24, 0x30	; 48
     f3e:	21 f4       	brne	.+8      	; 0xf48 <vfprintf+0x2ee>
     f40:	9a 2d       	mov	r25, r10
     f42:	99 7e       	andi	r25, 0xE9	; 233
     f44:	a9 2e       	mov	r10, r25
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <vfprintf+0x300>
     f48:	a2 fe       	sbrs	r10, 2
     f4a:	06 c0       	rjmp	.+12     	; 0xf58 <vfprintf+0x2fe>
     f4c:	b3 94       	inc	r11
     f4e:	b3 94       	inc	r11
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <vfprintf+0x300>
     f52:	8a 2d       	mov	r24, r10
     f54:	86 78       	andi	r24, 0x86	; 134
     f56:	09 f0       	breq	.+2      	; 0xf5a <vfprintf+0x300>
     f58:	b3 94       	inc	r11
     f5a:	a3 fc       	sbrc	r10, 3
     f5c:	11 c0       	rjmp	.+34     	; 0xf80 <vfprintf+0x326>
     f5e:	a0 fe       	sbrs	r10, 0
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <vfprintf+0x314>
     f62:	b2 14       	cp	r11, r2
     f64:	88 f4       	brcc	.+34     	; 0xf88 <vfprintf+0x32e>
     f66:	28 0c       	add	r2, r8
     f68:	92 2c       	mov	r9, r2
     f6a:	9b 18       	sub	r9, r11
     f6c:	0e c0       	rjmp	.+28     	; 0xf8a <vfprintf+0x330>
     f6e:	b2 14       	cp	r11, r2
     f70:	60 f4       	brcc	.+24     	; 0xf8a <vfprintf+0x330>
     f72:	b6 01       	movw	r22, r12
     f74:	80 e2       	ldi	r24, 0x20	; 32
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
     f7c:	b3 94       	inc	r11
     f7e:	f7 cf       	rjmp	.-18     	; 0xf6e <vfprintf+0x314>
     f80:	b2 14       	cp	r11, r2
     f82:	18 f4       	brcc	.+6      	; 0xf8a <vfprintf+0x330>
     f84:	2b 18       	sub	r2, r11
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <vfprintf+0x332>
     f88:	98 2c       	mov	r9, r8
     f8a:	21 2c       	mov	r2, r1
     f8c:	a4 fe       	sbrs	r10, 4
     f8e:	10 c0       	rjmp	.+32     	; 0xfb0 <vfprintf+0x356>
     f90:	b6 01       	movw	r22, r12
     f92:	80 e3       	ldi	r24, 0x30	; 48
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
     f9a:	a2 fe       	sbrs	r10, 2
     f9c:	17 c0       	rjmp	.+46     	; 0xfcc <vfprintf+0x372>
     f9e:	a1 fc       	sbrc	r10, 1
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <vfprintf+0x34e>
     fa2:	88 e7       	ldi	r24, 0x78	; 120
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x352>
     fa8:	88 e5       	ldi	r24, 0x58	; 88
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	b6 01       	movw	r22, r12
     fae:	0c c0       	rjmp	.+24     	; 0xfc8 <vfprintf+0x36e>
     fb0:	8a 2d       	mov	r24, r10
     fb2:	86 78       	andi	r24, 0x86	; 134
     fb4:	59 f0       	breq	.+22     	; 0xfcc <vfprintf+0x372>
     fb6:	a1 fe       	sbrs	r10, 1
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x364>
     fba:	8b e2       	ldi	r24, 0x2B	; 43
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <vfprintf+0x366>
     fbe:	80 e2       	ldi	r24, 0x20	; 32
     fc0:	a7 fc       	sbrc	r10, 7
     fc2:	8d e2       	ldi	r24, 0x2D	; 45
     fc4:	b6 01       	movw	r22, r12
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
     fcc:	89 14       	cp	r8, r9
     fce:	38 f4       	brcc	.+14     	; 0xfde <vfprintf+0x384>
     fd0:	b6 01       	movw	r22, r12
     fd2:	80 e3       	ldi	r24, 0x30	; 48
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
     fda:	9a 94       	dec	r9
     fdc:	f7 cf       	rjmp	.-18     	; 0xfcc <vfprintf+0x372>
     fde:	8a 94       	dec	r8
     fe0:	f3 01       	movw	r30, r6
     fe2:	e8 0d       	add	r30, r8
     fe4:	f1 1d       	adc	r31, r1
     fe6:	80 81       	ld	r24, Z
     fe8:	b6 01       	movw	r22, r12
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
     ff0:	81 10       	cpse	r8, r1
     ff2:	f5 cf       	rjmp	.-22     	; 0xfde <vfprintf+0x384>
     ff4:	22 20       	and	r2, r2
     ff6:	09 f4       	brne	.+2      	; 0xffa <vfprintf+0x3a0>
     ff8:	42 ce       	rjmp	.-892    	; 0xc7e <vfprintf+0x24>
     ffa:	b6 01       	movw	r22, r12
     ffc:	80 e2       	ldi	r24, 0x20	; 32
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
    1004:	2a 94       	dec	r2
    1006:	f6 cf       	rjmp	.-20     	; 0xff4 <vfprintf+0x39a>
    1008:	f6 01       	movw	r30, r12
    100a:	86 81       	ldd	r24, Z+6	; 0x06
    100c:	97 81       	ldd	r25, Z+7	; 0x07
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <vfprintf+0x3ba>
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	9f ef       	ldi	r25, 0xFF	; 255
    1014:	2b 96       	adiw	r28, 0x0b	; 11
    1016:	e2 e1       	ldi	r30, 0x12	; 18
    1018:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__epilogue_restores__>

0000101c <strnlen_P>:
    101c:	fc 01       	movw	r30, r24
    101e:	05 90       	lpm	r0, Z+
    1020:	61 50       	subi	r22, 0x01	; 1
    1022:	70 40       	sbci	r23, 0x00	; 0
    1024:	01 10       	cpse	r0, r1
    1026:	d8 f7       	brcc	.-10     	; 0x101e <strnlen_P+0x2>
    1028:	80 95       	com	r24
    102a:	90 95       	com	r25
    102c:	8e 0f       	add	r24, r30
    102e:	9f 1f       	adc	r25, r31
    1030:	08 95       	ret

00001032 <strnlen>:
    1032:	fc 01       	movw	r30, r24
    1034:	61 50       	subi	r22, 0x01	; 1
    1036:	70 40       	sbci	r23, 0x00	; 0
    1038:	01 90       	ld	r0, Z+
    103a:	01 10       	cpse	r0, r1
    103c:	d8 f7       	brcc	.-10     	; 0x1034 <strnlen+0x2>
    103e:	80 95       	com	r24
    1040:	90 95       	com	r25
    1042:	8e 0f       	add	r24, r30
    1044:	9f 1f       	adc	r25, r31
    1046:	08 95       	ret

00001048 <__ultoa_invert>:
    1048:	fa 01       	movw	r30, r20
    104a:	aa 27       	eor	r26, r26
    104c:	28 30       	cpi	r18, 0x08	; 8
    104e:	51 f1       	breq	.+84     	; 0x10a4 <__ultoa_invert+0x5c>
    1050:	20 31       	cpi	r18, 0x10	; 16
    1052:	81 f1       	breq	.+96     	; 0x10b4 <__ultoa_invert+0x6c>
    1054:	e8 94       	clt
    1056:	6f 93       	push	r22
    1058:	6e 7f       	andi	r22, 0xFE	; 254
    105a:	6e 5f       	subi	r22, 0xFE	; 254
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	8f 4f       	sbci	r24, 0xFF	; 255
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	af 4f       	sbci	r26, 0xFF	; 255
    1064:	b1 e0       	ldi	r27, 0x01	; 1
    1066:	3e d0       	rcall	.+124    	; 0x10e4 <__ultoa_invert+0x9c>
    1068:	b4 e0       	ldi	r27, 0x04	; 4
    106a:	3c d0       	rcall	.+120    	; 0x10e4 <__ultoa_invert+0x9c>
    106c:	67 0f       	add	r22, r23
    106e:	78 1f       	adc	r23, r24
    1070:	89 1f       	adc	r24, r25
    1072:	9a 1f       	adc	r25, r26
    1074:	a1 1d       	adc	r26, r1
    1076:	68 0f       	add	r22, r24
    1078:	79 1f       	adc	r23, r25
    107a:	8a 1f       	adc	r24, r26
    107c:	91 1d       	adc	r25, r1
    107e:	a1 1d       	adc	r26, r1
    1080:	6a 0f       	add	r22, r26
    1082:	71 1d       	adc	r23, r1
    1084:	81 1d       	adc	r24, r1
    1086:	91 1d       	adc	r25, r1
    1088:	a1 1d       	adc	r26, r1
    108a:	20 d0       	rcall	.+64     	; 0x10cc <__ultoa_invert+0x84>
    108c:	09 f4       	brne	.+2      	; 0x1090 <__ultoa_invert+0x48>
    108e:	68 94       	set
    1090:	3f 91       	pop	r19
    1092:	2a e0       	ldi	r18, 0x0A	; 10
    1094:	26 9f       	mul	r18, r22
    1096:	11 24       	eor	r1, r1
    1098:	30 19       	sub	r19, r0
    109a:	30 5d       	subi	r19, 0xD0	; 208
    109c:	31 93       	st	Z+, r19
    109e:	de f6       	brtc	.-74     	; 0x1056 <__ultoa_invert+0xe>
    10a0:	cf 01       	movw	r24, r30
    10a2:	08 95       	ret
    10a4:	46 2f       	mov	r20, r22
    10a6:	47 70       	andi	r20, 0x07	; 7
    10a8:	40 5d       	subi	r20, 0xD0	; 208
    10aa:	41 93       	st	Z+, r20
    10ac:	b3 e0       	ldi	r27, 0x03	; 3
    10ae:	0f d0       	rcall	.+30     	; 0x10ce <__ultoa_invert+0x86>
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <__ultoa_invert+0x5c>
    10b2:	f6 cf       	rjmp	.-20     	; 0x10a0 <__ultoa_invert+0x58>
    10b4:	46 2f       	mov	r20, r22
    10b6:	4f 70       	andi	r20, 0x0F	; 15
    10b8:	40 5d       	subi	r20, 0xD0	; 208
    10ba:	4a 33       	cpi	r20, 0x3A	; 58
    10bc:	18 f0       	brcs	.+6      	; 0x10c4 <__ultoa_invert+0x7c>
    10be:	49 5d       	subi	r20, 0xD9	; 217
    10c0:	31 fd       	sbrc	r19, 1
    10c2:	40 52       	subi	r20, 0x20	; 32
    10c4:	41 93       	st	Z+, r20
    10c6:	02 d0       	rcall	.+4      	; 0x10cc <__ultoa_invert+0x84>
    10c8:	a9 f7       	brne	.-22     	; 0x10b4 <__ultoa_invert+0x6c>
    10ca:	ea cf       	rjmp	.-44     	; 0x10a0 <__ultoa_invert+0x58>
    10cc:	b4 e0       	ldi	r27, 0x04	; 4
    10ce:	a6 95       	lsr	r26
    10d0:	97 95       	ror	r25
    10d2:	87 95       	ror	r24
    10d4:	77 95       	ror	r23
    10d6:	67 95       	ror	r22
    10d8:	ba 95       	dec	r27
    10da:	c9 f7       	brne	.-14     	; 0x10ce <__ultoa_invert+0x86>
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	61 05       	cpc	r22, r1
    10e0:	71 05       	cpc	r23, r1
    10e2:	08 95       	ret
    10e4:	9b 01       	movw	r18, r22
    10e6:	ac 01       	movw	r20, r24
    10e8:	0a 2e       	mov	r0, r26
    10ea:	06 94       	lsr	r0
    10ec:	57 95       	ror	r21
    10ee:	47 95       	ror	r20
    10f0:	37 95       	ror	r19
    10f2:	27 95       	ror	r18
    10f4:	ba 95       	dec	r27
    10f6:	c9 f7       	brne	.-14     	; 0x10ea <__ultoa_invert+0xa2>
    10f8:	62 0f       	add	r22, r18
    10fa:	73 1f       	adc	r23, r19
    10fc:	84 1f       	adc	r24, r20
    10fe:	95 1f       	adc	r25, r21
    1100:	a0 1d       	adc	r26, r0
    1102:	08 95       	ret

00001104 <__prologue_saves__>:
    1104:	2f 92       	push	r2
    1106:	3f 92       	push	r3
    1108:	4f 92       	push	r4
    110a:	5f 92       	push	r5
    110c:	6f 92       	push	r6
    110e:	7f 92       	push	r7
    1110:	8f 92       	push	r8
    1112:	9f 92       	push	r9
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	ca 1b       	sub	r28, r26
    112e:	db 0b       	sbc	r29, r27
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	09 94       	ijmp

0000113c <__epilogue_restores__>:
    113c:	2a 88       	ldd	r2, Y+18	; 0x12
    113e:	39 88       	ldd	r3, Y+17	; 0x11
    1140:	48 88       	ldd	r4, Y+16	; 0x10
    1142:	5f 84       	ldd	r5, Y+15	; 0x0f
    1144:	6e 84       	ldd	r6, Y+14	; 0x0e
    1146:	7d 84       	ldd	r7, Y+13	; 0x0d
    1148:	8c 84       	ldd	r8, Y+12	; 0x0c
    114a:	9b 84       	ldd	r9, Y+11	; 0x0b
    114c:	aa 84       	ldd	r10, Y+10	; 0x0a
    114e:	b9 84       	ldd	r11, Y+9	; 0x09
    1150:	c8 84       	ldd	r12, Y+8	; 0x08
    1152:	df 80       	ldd	r13, Y+7	; 0x07
    1154:	ee 80       	ldd	r14, Y+6	; 0x06
    1156:	fd 80       	ldd	r15, Y+5	; 0x05
    1158:	0c 81       	ldd	r16, Y+4	; 0x04
    115a:	1b 81       	ldd	r17, Y+3	; 0x03
    115c:	aa 81       	ldd	r26, Y+2	; 0x02
    115e:	b9 81       	ldd	r27, Y+1	; 0x01
    1160:	ce 0f       	add	r28, r30
    1162:	d1 1d       	adc	r29, r1
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	ed 01       	movw	r28, r26
    1170:	08 95       	ret

00001172 <_exit>:
    1172:	f8 94       	cli

00001174 <__stop_program>:
    1174:	ff cf       	rjmp	.-2      	; 0x1174 <__stop_program>
